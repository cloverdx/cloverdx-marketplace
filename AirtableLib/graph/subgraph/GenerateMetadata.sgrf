<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="others" created="Wed Feb 08 13:09:54 CET 2023" description="This subgraph will generate clover metadata based on table structure in a specific Airtable Base. Result is stored in location defined in Metadata Path parameter." guiVersion="6.4.0.1824" id="1675860936677" largeIconPath="${PROJECT}/icons/airtable64x64.png" licenseCode="CLCDSCLOVE72646208SP" mediumIconPath="${PROJECT}/icons/airtable32x32.png" name="GenerateMetadataFromBase" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icons/airtable16x16.png">
<Global>
<inputPorts>
<singlePort connected="true" keepEdge="true" name="0" required="false"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" name="0"/>
<singlePort connected="false" keepEdge="true" name="1" required="false"/>
</outputPorts>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="AirtableGenerateMetadata_Error" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field label="Status code" name="statusCode" type="integer"/>
<Field label="Error message" name="errorMessage" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="AirtableGenerateMetadata_Input" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field label="Base Id" name="BASE_ID" type="string">
<attr name="description"><![CDATA[Airtable Base identifier, can be found in URL.]]></attr>
</Field>
<Field label="Metadata Path" name="METADATA_PATH" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="AirtableGenerateMetadata_Response" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field label="Table Name" name="tableName" type="string"/>
<Field label="Table Id" name="tableId" type="string"/>
<Field label="Metadata URL" name="metadataURL" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="parsedResponse" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="fieldName" type="string"/>
<Field name="fieldAirtableType" type="string"/>
<Field name="fieldCloverType" type="string"/>
<Field name="tableName" type="string"/>
<Field name="tableId" type="string"/>
<Field name="precision" type="integer"/>
<Field name="length" type="integer"/>
</Record>
</Metadata>
<Connection config="${OAUTH_CONN}" id="OAUTH20" type="OAUTH2"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameter label="Base Id" name="BASE_ID" public="true">
<attr name="description"><![CDATA[Airtable Base identifier, can be found in URL.]]></attr>
</GraphParameter>
<GraphParameter label="Metadata Path" name="METADATA_PATH" public="true">
<SingleType multiple="true" name="file" selectionMode="directory_only"/>
</GraphParameter>
<GraphParameterFile fileURL="library.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Assign Clover data type" guiX="1516" guiY="142" id="ASSIGN_CLOVER_DATA_TYPE" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.fieldCloverType = airtableTypeToClover($in.0.fieldAirtableType);
	
	if($out.0.fieldCloverType == 'decimal'){
		$out.0.length = 12;
	}
	return ALL;
}

function string airtableTypeToClover(string input) {
	string output;
	if (input == "number"){
		if($in.0.precision == 0){
			output = "integer";
		} else {
			output = "decimal";
		}
	} else if (input == "date"){
			output = "date";
	} else if (input == "autoNumber"){
			output = "integer";
	} else if (input == "checkbox"){
			output = "boolean";
	} else {
			output = "string";	
	}
	return output;
}
// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="call success?" guiX="1059" guiY="142" id="CALL_SUCCESS" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200;]]></attr>
</Node>
<Node guiName="copy" guiX="1787" guiY="142" id="COPY" type="SIMPLE_COPY"/>
<Node debugInput="true" guiName="DebugInput" guiX="-120" guiY="142" id="DEBUG_INPUT" recordsNumber="0" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node dedupKey="tableId(a)" guiName="dedup on tableId" guiX="2000" guiY="142" id="DEDUP_ON_TABLE_ID" sorted="false" type="DEDUP"/>
<Node guiName="format error" guiX="1102" guiY="444" id="FORMAT_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = nvl($in.0.errorMessage, 'host is unreachable');
	$out.0.statusCode = 500;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="format HTTP error" guiX="1236" guiY="283" id="FORMAT_HTTP_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = nvl($in.0.errorMessage, $in.0.content);
	$out.0.statusCode = $in.0.statusCode;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="get input values from parameters" guiX="99" guiY="247" id="GET_INPUT_VALUES_FROM_PARAMETERS" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	//TODO parse input parameters e.g.
	if(!isBlank(getParamValue("BASE_ID"))){
			$out.0.BASE_ID = getParamValue("BASE_ID");
	}
		
	if(!isBlank(getParamValue("METADATA_PATH"))){
			$out.0.METADATA_PATH = getParamValue("METADATA_PATH");
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Input from edge/parameters" guiX="396" guiY="142" id="INPUT_FROM_EDGE_PARAMETERS" incompleteTuples="true" type="COMBINE">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	if(isnull($in.0.BASE_ID)){
		$out.0.* = $in.1.*;
		return OK;
	} else {
		$out.0.* = $in.0.*;
	return OK;
	}
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="parse response" guiX="1261" guiY="142" id="PARSE_RESPONSE" schema="${META_DIR}/airtableBaseSchemaXML/sampleAirtableSchema_json" sourceUri="port:$0.content:discrete" type="JSON_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="json_object">
		<Mapping element="tables">
			<Mapping element="fields" outPort="0"
					xmlFields="../{}id;../{}name;{}name;{}type"
					cloverFields="tableId;tableName;fieldName;fieldAirtableType">
				<Mapping element="options" useParentRecord="true"
						xmlFields="{}precision"
						cloverFields="precision">
				</Mapping>
			</Mapping>
		</Mapping>
	</Mapping>
</Mappings>
]]></attr>
</Node>
<Node addInputFieldsAsParameters="false" addInputFieldsAsParametersTo="BODY" guiName="Prepare request and call to target API" guiX="695" guiY="142" id="PREPARE_REQUEST_AND_CALL_TO_TARGET_API" oAuth2Connection="OAUTH20" requestMethod="GET" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

variant recordRequest = {};

function integer transform() {
	$out.0.URL = 'https://api.airtable.com/v0/meta/bases/' + $in.0.BASE_ID + '/tables';
	return ALL;
}

]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="58" guiY="10" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="159" name="0"/>
<Port guiY="229" name="1"/>
</Node>
<Node fileURL="${DATATMP_DIR}/${RUN_ID}" guiName="write metadata structure to temp file" guiX="2052" guiY="10" id="WRITE_METADATA_STRUCTURE_TO_TEMP_FILE" makeDirs="true" type="CLOVER_WRITER"/>
<Edge fromNode="ASSIGN_CLOVER_DATA_TYPE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="COPY:0"/>
<Edge fromNode="CALL_SUCCESS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (input)" outPort="Port 0 (accepted)" toNode="PARSE_RESPONSE:0"/>
<Edge fromNode="CALL_SUCCESS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="FORMAT_HTTP_ERROR:0"/>
<Edge fromNode="COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEDUP_ON_TABLE_ID:0"/>
<Edge fromNode="COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="WRITE_METADATA_STRUCTURE_TO_TEMP_FILE:0"/>
<Edge fromNode="DEBUG_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT:0"/>
<Edge fromNode="DEDUP_ON_TABLE_ID:0" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" outPort="Port 0 (unique)" toNode="AIRTABLE_GENERATE_METADATA_WRITER:0"/>
<Edge fromNode="FORMAT_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 1 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="GATHER_ERRORS:1"/>
<Edge fromNode="FORMAT_HTTP_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="GATHER_ERRORS:0"/>
<Edge fromNode="GET_INPUT_VALUES_FROM_PARAMETERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="INPUT_FROM_EDGE_PARAMETERS:1"/>
<Edge fromNode="INPUT_FROM_EDGE_PARAMETERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="PREPARE_REQUEST_AND_CALL_TO_TARGET_API:0"/>
<Edge fromNode="PARSE_RESPONSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="ASSIGN_CLOVER_DATA_TYPE:0"/>
<Edge fromNode="PREPARE_REQUEST_AND_CALL_TO_TARGET_API:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="CALL_SUCCESS:0"/>
<Edge fromNode="PREPARE_REQUEST_AND_CALL_TO_TARGET_API:1" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FORMAT_ERROR:0"/>
<Edge fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="INPUT_FROM_EDGE_PARAMETERS:0"/>
</Phase>
<Phase number="5">
<Node guiName="AirtableGenerateMetadataWriter" guiX="2226" guiY="142" id="AIRTABLE_GENERATE_METADATA_WRITER" jobURL="${GRAPH_DIR}/AirtableGenerateMetadataWriter.grf" type="EXECUTE_GRAPH">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.METADATA_FILE_URL = getParamValue('METADATA_PATH') + '/' + $in.0.tableId + '.fmt';
	$out.1.TABLE_STRUCTURE_FILE_URL = getParamValue('DATATMP_DIR') + '/' + getParamValue('RUN_ID');
	$out.1.TABLE_ID = $in.0.tableId;
	$out.0.executionLabel = $in.0.tableName;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.metadataURL = getParamValue('METADATA_PATH') + '/' + $in.0.tableId + '.fmt';
	$out.0.tableName = $in.0.tableName;
	$out.0.tableId = $in.0.tableId;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.errorMessage = $in.1.errMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node enabled="enableWhenOutputPort1IsDisconnected" guiName="Fail" guiX="2740" guiY="403" id="FAIL" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="gather errors" guiX="2590" guiY="283" id="GATHER_ERRORS" type="SIMPLE_GATHER"/>
<Node guiName="Map" guiX="2590" guiY="142" id="MAP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Edge fromNode="AIRTABLE_GENERATE_METADATA_WRITER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="MAP:0"/>
<Edge fromNode="AIRTABLE_GENERATE_METADATA_WRITER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 2 (in)" outPort="Port 1 (error)" toNode="GATHER_ERRORS:2"/>
<Edge fromNode="GATHER_ERRORS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="GATHER_ERRORS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FAIL:0"/>
<Edge fromNode="MAP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge17" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
</Phase>
<Phase number="10">
<Node fileURL="${DATATMP_DIR}/${RUN_ID}" guiName="delete temporary file" guiX="2372" guiY="10" id="DATATMP_DIR_RUN_ID" type="DELETE_FILES"/>
</Phase>
<Phase number="20">
<Node debugOutput="true" guiName="DebugOutput" guiX="2998" guiY="142" id="DEBUG_OUTPUT" type="TRASH"/>
<Node guiName="SubgraphOutput" guiX="2884" guiY="10" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="159" name="0"/>
<Port guiY="229" name="1"/>
<Port guiY="299" name="2"/>
</Node>
<Edge fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEBUG_OUTPUT:0"/>
</Phase>
</Graph>
