<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="readers" created="Mon Mar 06 10:33:22 EST 2017" description="Reader capable parsing ICS files containing calendar information." guiVersion="5.15.0.15" id="1488830658394" largeIconPath="${ICS_READER_DIR}/graph/subgraph/icons/ics-reader-64.png" licenseCode="CLP1DJAVLI56082859BY" mediumIconPath="${ICS_READER_DIR}/graph/subgraph/icons/ics-reader-32.png" name="ICSReader" nature="subgraph" showComponentDetails="true" smallIconPath="${ICS_READER_DIR}/graph/subgraph/icons/ics-reader-16.png">
<Global>
<outputPorts>
<singlePort connected="true" name="0"/>
<singlePort connected="true" name="1"/>
</outputPorts>
<Metadata id="Metadata3">
<Record eofAsDelimiter="true" name="Content" recordDelimiter="EOF" type="delimited">
<Field name="content" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="VCalendar" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="prodid" type="string"/>
<Field name="version" type="string"/>
<Field name="calscale" type="string"/>
<Field name="method" type="string"/>
<Field name="x_wr_calname" type="string"/>
<Field name="x_wr_timezone" type="string"/>
<Field name="x_wr_caldesc" type="string"/>
<Field name="tzid" type="string"/>
<Field name="x_lic_location" type="string"/>
<Field name="tzoffsetfrom" type="string"/>
<Field name="tzoffsetto" type="string"/>
<Field name="tzname" type="string"/>
<Field name="dtstart" type="string"/>
<Field name="rrule" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="VCalendarWithMap" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="prodid" type="string"/>
<Field name="version" type="string"/>
<Field name="calscale" type="string"/>
<Field name="method" type="string"/>
<Field name="x_wr_calname" type="string"/>
<Field name="x_wr_timezone" type="string"/>
<Field name="x_wr_caldesc" type="string"/>
<Field name="tzid" type="string"/>
<Field name="x_lic_location" type="string"/>
<Field name="tzoffsetfrom" type="string"/>
<Field name="tzoffsetto" type="string"/>
<Field name="tzname" type="string"/>
<Field name="dtstart" type="string"/>
<Field containerType="map" name="rrule" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="VEvent" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="dtstart" type="string"/>
<Field name="dtend" type="string"/>
<Field name="dtstamp" type="string"/>
<Field name="uid" type="string"/>
<Field name="created" type="string"/>
<Field name="description" type="string"/>
<Field name="last_modified" type="string"/>
<Field name="location" type="string"/>
<Field name="sequence" type="string"/>
<Field name="status" type="string"/>
<Field name="summary" type="string"/>
<Field name="transp" type="string"/>
<Field name="rule" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5" previewAttachmentCharset="UTF-8">
<Record fieldDelimiter="|" name="VEventWithMap" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="dtstart" type="string"/>
<Field name="dtend" type="string"/>
<Field name="dtstamp" type="string"/>
<Field name="uid" type="string"/>
<Field name="created" type="string"/>
<Field name="description" type="string"/>
<Field name="last_modified" type="string"/>
<Field name="location" type="string"/>
<Field name="sequence" type="string"/>
<Field name="status" type="string"/>
<Field name="summary" type="string"/>
<Field name="transp" type="string"/>
<Field containerType="map" name="rules" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter label="File URL" name="FILE_URL" public="true" required="false" value="${ICS_READER_DIR}/test/data-in/classschedule.ics">
<ComponentReference referencedComponent="FLAT_FILE_READER" referencedProperty="fileURL"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="C0C0C0" enabled="true" folded="false" fontSize="medium" height="272" id="Note1" textColor="000000" width="387" x="90" y="-274">
<attr name="text"><![CDATA[h3. Graph Info
Subgraphs that parses provided .ics. 

It uses xslt transformation to transform .ics to .xml for easier manipulation.

It removes BOM character at the beginning of provided .ics file if necessary, wraps .ics content to dummy xml elements to use XSLTransformer for conversion.

Currently returns all timestamps as strings as different  timezones could be defined inside of .ics (?)]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="BEF096" enabled="true" folded="false" fontSize="medium" height="272" id="Note6" textColor="000000" width="413" x="493" y="-274">
<attr name="text"><![CDATA[h3. Inputs
Parameters:
* *FILE_URL* - processed file]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="7F7FFF" enabled="true" folded="false" fontSize="medium" height="272" id="Note3" textColor="000000" width="413" x="921" y="-274">
<attr name="text"><![CDATA[h3. Outputs
* *Port0* - calendar info
* *Port1* - events info]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node fileURL="${FILE_URL}" guiName="FlatFileReader" guiX="214" guiY="129" id="FLAT_FILE_READER" type="FLAT_FILE_READER"/>
<Node guiName=".ics to .xml" guiX="648" guiY="129" id="ICS_TO_XML" type="XSL_TRANSFORMER" xmlInputFile="port:$0.content:discrete" xmlOutputFile="port:$0.content:discrete">
<attr name="xslt"><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

<xsl:output
    method="xml" 
    doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 
    omit-xml-declaration="yes"
    encoding="UTF-8" 
    indent="yes" />

<xsl:param name="ical-data-raw" select="/data/vcalendar"/>
<xsl:param name="ical-data" select="normalize-space($ical-data-raw)"/>
<xsl:param name="ical-properties" select="substring-before($ical-data,' BEGIN:VEVENT')"/>
<xsl:param name="ical-events">
<xsl:value-of select="concat('BEGIN:VEVENT ',substring-before(substring-after($ical-data,'BEGIN:VEVENT '),' END:VCALENDAR'))"/>
</xsl:param>

<xsl:template match="/">

    <xsl:call-template name="xcal-calendar">
        <xsl:with-param name="input" select="$ical-properties"/>
        <xsl:with-param name="type" select="'calendar'"/>
        <xsl:with-param name="output-format" select="'xcalendar'"/>
    </xsl:call-template>

</xsl:template>

<xsl:template name="xcal-calendar">
    <xsl:param name="input"/>
    <xsl:param name="type" select="'event'"/>
    <xsl:param name="output-format" select="'xcalendar'"/>
    <xsl:param name="ical-properties-data" select="$input"/>
    <xsl:param name="remaining-event-data" select="substring-after($input, $ical-properties-data)"/>
    <xsl:choose>
        <xsl:when test="$output-format = 'xcalendar'">
            <iCalendar>
                <vcalendar>
                    <xsl:call-template name="properties">
                        <xsl:with-param name="input" select="$ical-properties-data"/>
                        <xsl:with-param name="type" select="$type"/>
                        <xsl:with-param name="output-format" select="$output-format"/>
                    </xsl:call-template>
                    <xsl:call-template name="xcal-events">
                        <xsl:with-param name="input" select="$ical-events"/>
                        <xsl:with-param name="type" select="'event'"/>
                        <xsl:with-param name="output-format" select="$output-format"/>
                    </xsl:call-template>
                </vcalendar>
            </iCalendar>
        </xsl:when>
        <xsl:when test="$output-format = 'xcalendar-encoded'">
            <code><pre>
            <xsl:text>&lt;iCalendar&gt;&#xd;</xsl:text>
            <xsl:text>&lt;vcalendar&#xd;</xsl:text>
            <xsl:call-template name="properties">
                <xsl:with-param name="input" select="$ical-properties-data"/>
                <xsl:with-param name="type" select="$type"/>
                <xsl:with-param name="output-format" select="$output-format"/>
            </xsl:call-template>
            <xsl:text>&gt;&#xd;</xsl:text>
            <xsl:call-template name="xcal-events">
                <xsl:with-param name="input" select="$ical-events"/>
                <xsl:with-param name="type" select="'event'"/>
                <xsl:with-param name="output-format" select="$output-format"/>
            </xsl:call-template>
            <xsl:text>&lt;/vcalendar&gt;&#xd;</xsl:text>
            <xsl:text>&lt;/iCalendar&gt;&#xd;</xsl:text>
            </pre></code>
        </xsl:when>
    </xsl:choose>
    <xsl:if test="$remaining-event-data != ''">
        <xsl:call-template name="xcal-calendar">
            <xsl:with-param name="input" select="$remaining-event-data"/>
            <xsl:with-param name="type" select="$type"/>
            <xsl:with-param name="output-format" select="$output-format"/>
        </xsl:call-template>
    </xsl:if>
</xsl:template>


<xsl:template name="xcal-events">
	<xsl:param name="input"/>
    <xsl:param name="type" select="'event'"/>
    <xsl:param name="output-format" select="'xcalendar'"/>
    <xsl:param name="ical-event-data" select="concat('BEGIN:VEVENT ',substring-before(substring-after($input,'BEGIN:VEVENT '),' END:VEVENT'),' END:VEVENT')"/>
    <xsl:param name="remaining-event-data" select="substring-after($input, $ical-event-data)"/>
    <xsl:choose>
        <xsl:when test="$output-format = 'xcalendar'">
            <vevent>
                <xsl:call-template name="properties">
                    <xsl:with-param name="input" select="$ical-event-data"/>
                    <xsl:with-param name="type" select="$type"/>
                    <xsl:with-param name="output-format" select="$output-format"/>
                </xsl:call-template>
            </vevent>
        </xsl:when>
        <xsl:when test="$output-format = 'xcalendar-encoded'">
            <xsl:text>&#x9;&lt;vevent&gt;&#xd;</xsl:text>
                <xsl:call-template name="properties">
                    <xsl:with-param name="input" select="$ical-event-data"/>
                    <xsl:with-param name="type" select="$type"/>
                    <xsl:with-param name="output-format" select="$output-format"/>
                </xsl:call-template>
            <xsl:text>&#x9;&lt;/vevent&gt;&#xd;</xsl:text>
        </xsl:when>
        <xsl:when test="$output-format = 'hcalendar'">
        </xsl:when>
    </xsl:choose>
    <xsl:if test="$remaining-event-data != ''">
        <xsl:call-template name="xcal-events">
            <xsl:with-param name="input" select="$remaining-event-data"/>
            <xsl:with-param name="type" select="$type"/>
            <xsl:with-param name="output-format" select="$output-format"/>
        </xsl:call-template>
    </xsl:if>

</xsl:template>

<xsl:template name="properties">
	<xsl:param name="input" select="$ical-data"/>
    <xsl:param name="type" select="'event'"/>
    <xsl:param name="output-format" select="'xcalendar'"/>
    <xsl:param name="property-and-attribute-caps" select="substring-before($input,':')"/>
    <xsl:param name="property-and-attribute" select="translate($property-and-attribute-caps,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
    <xsl:param name="property">
        <xsl:choose>
            <xsl:when test="contains($property-and-attribute,';')">
                <xsl:value-of select="substring-before($property-and-attribute,';')"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$property-and-attribute"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:param>
    <xsl:param name="property-attribute" select="substring-after($property-and-attribute,';')"/>
    <xsl:param name="property-attribute-name" select="substring-before($property-attribute,'=')"/>
    <xsl:param name="property-attribute-value" select="substring-after($property-attribute,'=')"/>
    <xsl:param name="string-after-property" select="substring-after($input,':')"/>
    <xsl:param name="next-string" select="substring-before($string-after-property,':')"/>
    <xsl:param name="reverse-next-string">
        <xsl:call-template name="reverse">
            <xsl:with-param name="input" select="$next-string"/>
        </xsl:call-template>
    </xsl:param>
    <xsl:param name="reverse-next-property" select="substring-before($reverse-next-string,' ')"/>
    <xsl:param name="next-property">
        <xsl:call-template name="reverse">
            <xsl:with-param name="input" select="substring-before($reverse-next-string,' ')"/>
        </xsl:call-template>
    </xsl:param>
    <xsl:param name="string-before-next-property" select="substring-before($next-string, concat(' ',$next-property))"/>
    <xsl:param name="plural-values" select="contains($string-before-next-property,';')"/>
    <xsl:param name="multiple-items">
        <xsl:if test="$plural-values">
            <xsl:value-of select="translate($string-before-next-property,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/>
        </xsl:if>
    </xsl:param>
    <xsl:param name="items">
        <xsl:call-template name="items">
            <xsl:with-param name="input" select="$multiple-items"/>
            <xsl:with-param name="output-format" select="$output-format"/>
        </xsl:call-template>
    </xsl:param>
    <xsl:param name="value">
        <xsl:choose>
            <xsl:when test="$next-property != '' and contains($string-before-next-property,';') and $output-format = 'xcalendar-encoded'">
                <xsl:value-of select="$items"/>
            </xsl:when>
            <xsl:when test="$next-property != ''">
                <xsl:value-of select="$string-before-next-property"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$string-after-property"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:param>
    <xsl:param name="remaining-string" select="substring-after($string-after-property,concat($value,' '))"/>
    <xsl:if test="$property != 'begin' and $property != 'end'">
        <xsl:choose>
            <xsl:when test="$type = 'event'">
                <xsl:choose>
                    <xsl:when test="$output-format = 'xcalendar'">
                        <xsl:choose>
                            <xsl:when test="$property-attribute-name = 'value'">
                                <xsl:element name="{$property}">
                                    <xsl:attribute name="{$property-attribute-name}"><xsl:value-of select="$property-attribute-value"/></xsl:attribute>
                                    <xsl:value-of select="$value"/>
                                </xsl:element>
                            </xsl:when>
                            <xsl:when test="$plural-values and $output-format = 'xcalendar'">
                                <xsl:element name="{$property}">
                                    <xsl:copy-of select="$items"/>
                                </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:element name="{$property}">
                                    <xsl:value-of select="$value"/>
                                </xsl:element>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                    <xsl:when test="$output-format = 'xcalendar-encoded'">
                        <xsl:choose>
                            <xsl:when test="$property-attribute-name = 'value'">
                                <xsl:text>&#x9;&#x9;&lt;</xsl:text>
                                <xsl:value-of select="$property"/>
                                <xsl:text> </xsl:text>
                                <xsl:value-of select="$property-attribute-name"/>
                                <xsl:text>="</xsl:text>
                                <xsl:value-of select="$property-attribute-value"/>
                                <xsl:text>"&gt;</xsl:text>
                                <xsl:value-of select="$value"/>
                                <xsl:text>&lt;/</xsl:text>
                                <xsl:value-of select="$property"/>
                                <xsl:text>&gt;&#xd;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:text>&#x9;&#x9;&lt;</xsl:text>
                                <xsl:value-of select="$property"/>
                                <xsl:text>&gt;</xsl:text>
                                <xsl:value-of select="$value"/>
                                <xsl:text>&lt;/</xsl:text>
                                <xsl:value-of select="$property"/>
                                <xsl:text>&gt;&#xd;</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:when>
                </xsl:choose>
            </xsl:when>
            <xsl:when test="$type = 'calendar'">
                <xsl:choose>
                    <xsl:when test="$output-format = 'xcalendar'">
                        <xsl:attribute name="{$property}"><xsl:value-of select="$value"/></xsl:attribute>
                    </xsl:when>
                    <xsl:when test="$output-format = 'xcalendar-encoded'">
                        <xsl:text>&#x9;</xsl:text>
                        <xsl:value-of select="$property"/>
                        <xsl:text>="</xsl:text>
                        <xsl:value-of select="$value"/>
                        <xsl:text>"</xsl:text>
                    </xsl:when>
                </xsl:choose>
            </xsl:when>
        </xsl:choose>
    </xsl:if>
    <xsl:if test="$remaining-string != ''">
        <xsl:if test="$property != 'begin' and $property != 'end' and $output-format = 'xcalendar-encoded' and $type = 'calendar'">
            <xsl:text>&#xd;</xsl:text>
        </xsl:if>
        <xsl:call-template name="properties">
            <xsl:with-param name="input" select="$remaining-string"/>
            <xsl:with-param name="type" select="$type"/>
            <xsl:with-param name="output-format" select="$output-format"/>
        </xsl:call-template>
    </xsl:if>

</xsl:template>


<xsl:template name="items">
	<xsl:param name="input"/>
    <xsl:param name="items" select="$input"/>
    <xsl:param name="output-format" select="'xcalendar'"/>
    <xsl:param name="delimiter" select="';'"/>
    <xsl:param name="item-and-value">
        <xsl:choose>
            <xsl:when test="contains($items,$delimiter)">
                <xsl:value-of select="substring-before($items,$delimiter)"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="$items"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:param>
    <xsl:param name="remaining-items" select="substring-after($items,$delimiter)"/>
    <xsl:param name="item" select="substring-before($item-and-value,'=')"/>
    <xsl:param name="value" select="substring-after($item-and-value,'=')"/>
    <xsl:choose>
        <xsl:when test="$output-format = 'xcalendar'">
            <item class="{$item}">
                <xsl:value-of select="$value"/>
            </item>
        </xsl:when>
        <xsl:when test="$output-format = 'xcalendar-encoded'">
            <xsl:text>&#xd;&#x9;&#x9;&#x9;&lt;</xsl:text>
            <xsl:value-of select="$item"/>
            <xsl:text>&gt;</xsl:text>
            <xsl:value-of select="$value"/>
            <xsl:text>&lt;/</xsl:text>
            <xsl:value-of select="$item"/>
            <xsl:text>&gt;</xsl:text>
        </xsl:when>
    </xsl:choose>
    <xsl:if test="$remaining-items != ''">
        <xsl:call-template name="items">
            <xsl:with-param name="input" select="$remaining-items"/>
            <xsl:with-param name="output-format" select="$output-format"/>
        </xsl:call-template>
    </xsl:if>
    <xsl:if test="$remaining-items = ''">
        <xsl:text>&#xd;&#x9;&#x9;</xsl:text>
    </xsl:if>
</xsl:template>

<xsl:template name="reverse">
	<xsl:param name="input"/>
    <xsl:variable name="length" select="string-length($input)"/>
    <xsl:choose>
        <xsl:when test="$length &lt; 2">
            <xsl:value-of select="$input"/>
        </xsl:when>     
        <xsl:when test="$length = 2">
            <xsl:value-of select="substring($input,2,1)"/>
            <xsl:value-of select="substring($input,1,1)"/>
        </xsl:when>     
        <xsl:otherwise>
            <xsl:variable name="middle" select="floor($length div 2)"/>
            <xsl:call-template name="reverse">
                <xsl:with-param name="input" select="substring($input,$middle + 1,$middle + 1)"/>
            </xsl:call-template>
            <xsl:call-template name="reverse">
                <xsl:with-param name="input" select="substring($input,1,$middle)"/>
            </xsl:call-template>
        </xsl:otherwise>        
    </xsl:choose>

</xsl:template>

</xsl:stylesheet>]]></attr>
</Node>
<Node guiName="Remove BOM + wrap in xml" guiX="378" guiY="129" id="REMOVE_BOM_WRAP_IN_XML" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	$out.0.content = '<?xml version="1.0" encoding="UTF-8"?>'+"\n<data>\n<vcalendar>\n" + replace($in.0.content, '\uFEFF', '') + "</vcalendar>\n</data>\n";

	return ALL;
}
]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="50" guiY="-269" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="110" name="0"/>
</Node>
<Edge fromNode="FLAT_FILE_READER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (output)" toNode="REMOVE_BOM_WRAP_IN_XML:0"/>
<Edge debugMode="true" fromNode="ICS_TO_XML:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (input)" metadata="Metadata3" outPort="Port 0 (out)" toNode="XMLEXTRACT:0"/>
<Edge debugMode="true" fromNode="REMOVE_BOM_WRAP_IN_XML:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="ICS_TO_XML:0"/>
</Phase>
<Phase number="5">
<Node debugOutput="true" guiName="DebugOutput" guiX="1454" guiY="50" id="DEBUG_OUTPUT" type="TRASH"/>
<Node debugOutput="true" guiName="DebugOutput" guiX="1454" guiY="241" id="DEBUG_OUTPUT1" type="TRASH"/>
<Node guiName="Rules to map" guiX="1049" guiY="97" id="RULES_TO_MAP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	map[string, string] rrules;
	string[] rules = split($in.0.rrule, ';');
	foreach(string rule : rules){
		string[] elements = split(rule, '=');
		if (length(elements) == 2){
			rrules[elements[0]] = elements[1];
		}
	}
	
	$out.0.rrule = rrules;
	
	return ALL;
}
]]></attr>
</Node>
<Node guiName="Rule to map" guiX="1055" guiY="241" id="RULE_TO_MAP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	
	string[] keys = find($in.0.rule, 'class="(.*)">(.*)</item>', 1);//group 1 - first parentheses
	string[] values = find($in.0.rule, 'class="(.*)">(.*)</item>', 2);//group 2 - first parentheses
	
	$out.0.rules = toMap(keys, values);

	return ALL;
}
]]></attr>
</Node>
<Node guiName="SubgraphOutput" guiX="1340" guiY="-269" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="67" name="0"/>
<Port guiY="258" name="1"/>
<Port guiY="328" name="2"/>
</Node>
<Node guiName="XMLExtract" guiX="834" guiY="129" id="XMLEXTRACT" schema="${META_DIR}/iCalendar.xsd" sourceUri="port:$0.content:discrete" type="XML_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="iCalendar">
		<Mapping element="vcalendar" outPort="0"
				xmlFields="{}calscale;{}dtstart;{}method;{}prodid;{}rrule;{}tzid;{}tzname;{}tzoffsetfrom;{}tzoffsetto;{}version;{}x-lic-location;{}x-wr-caldesc;{}x-wr-calname;{}x-wr-timezone"
				cloverFields="calscale;dtstart;method;prodid;rrule;tzid;tzname;tzoffsetfrom;tzoffsetto;version;x_lic_location;x_wr_caldesc;x_wr_calname;x_wr_timezone">
			<Mapping element="vevent" outPort="1"
					xmlFields="{}created;{}description;{}dtend;{}dtstamp;{}dtstart;{}last-modified;{}location;{}sequence;{}status;{}summary;{}transp;{}uid"
					cloverFields="created;description;dtend;dtstamp;dtstart;last_modified;location;sequence;status;summary;transp;uid">
				<Mapping element="rrule" useParentRecord="true"
						xmlFields="-"
						cloverFields="rule">
				</Mapping>
			</Mapping>
		</Mapping>
	</Mapping>
</Mappings>
]]></attr>
</Node>
<Edge debugMode="true" fromNode="RULES_TO_MAP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge debugMode="true" fromNode="RULE_TO_MAP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 1 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEBUG_OUTPUT:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="DEBUG_OUTPUT1:0"/>
<Edge debugMode="true" fromNode="XMLEXTRACT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="RULES_TO_MAP:0"/>
<Edge debugMode="true" fromNode="XMLEXTRACT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="RULE_TO_MAP:0"/>
</Phase>
</Graph>
