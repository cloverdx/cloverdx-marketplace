<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="writers" created="Wed Feb 28 09:12:12 CET 2024" description="The SalesforceBulkAPIStreamWriter processes data from an input edge and performs operations such as insert, update, upsert, delete, and hard delete. The input metadata must match the field names in Salesforce. The output reflects the results of the requested operation.  " guiVersion="7.0.0.15" id="1709120112995" largeIconPath="${PROJECT}/icons/sf64.png" licenseCode="CLCDSCLOVE72646208SP" mediumIconPath="${PROJECT}/icons/sf32.png" name="SalesforceBulkAPIStreamWriter" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icons/sf16.png">
<Global>
<inputPorts>
<singlePort connected="true" name="0" required="true"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" keepEdge="true" name="0" required="false"/>
<singlePort connected="true" keepEdge="true" name="1" required="false"/>
<singlePort connected="true" keepEdge="true" name="2" required="false"/>
<singlePort connected="false" keepEdge="true" name="3" required="false"/>
</outputPorts>
<Metadata fileURL="${META_DIR}/errorOutput.fmt" id="Metadata4"/>
<Metadata fileURL="${META_DIR}/idStateErrMsg.fmt" id="Metadata2"/>
<Metadata fileURL="${META_DIR}/json.fmt" id="Metadata0"/>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="csv" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="csv" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata5">
<Record fieldDelimiter="|" name="idStateCSV" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="id" type="string"/>
<Field name="state" type="string"/>
<Field name="csv" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata6">
<Record fieldDelimiter="," name="sForceOutput" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="sf__Id" type="string"/>
<Field name="sf__Created" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="," name="sForceOutputError" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="sf__Id" type="string"/>
<Field name="sf__Error" type="string"/>
</Record>
</Metadata>
<Connection config="${CONNECTION}" id="OAuth2Connection0" type="OAUTH2"/>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="library.prm"/>
<GraphParameter name="JOB_URL">
<attr name="dynamicValue"><![CDATA[//#CTL2


function string getValue() {

	return replace('${URL}' + '/services/data/' + '${API_VERSION}' + '/jobs/ingest/','//services','/services');
}
]]></attr>
</GraphParameter>
<GraphParameter label="Salesforce object" name="OBJECT" public="true" required="true">
<attr name="description"><![CDATA[Specifies the Salesforce object on which the writer will perform data operations.]]></attr>
</GraphParameter>
<GraphParameter name="CONTENTTYPE" public="false" value="CSV"/>
<GraphParameter label="Operation" name="OPERATION" public="true" value="insert">
<attr name="description"><![CDATA[Defines the operation to be performed: insert, update, upsert, delete, or hardDelete.]]></attr>
<SingleType allowCustomValues="false" name="simpleEnum" values="upsert;insert;update;delete;hardDelete"/>
</GraphParameter>
<GraphParameter label="External field name" name="EXTERNALFIELDNAME" public="true">
<attr name="description"><![CDATA[Required for upsert operations. Specifies the external field used to match external data with existing Salesforce records.]]></attr>
</GraphParameter>
<GraphParameter label="Batch size" name="BATCH_SIZE" public="true" value="1000">
<attr name="description"><![CDATA[Defines the number of records processed per batch. Adjusting this value optimizes performance and resource utilization.]]></attr>
</GraphParameter>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="675" id="Note0" textColor="444444" width="1175" x="1025" y="125">
<attr name="text"><![CDATA[h3. Generate Output Metadata]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="DEF4AB" folded="false" fontSize="medium" height="400" id="Note1" textColor="444444" width="450" x="1800" y="875">
<attr name="text"><![CDATA[h3. Response without ID]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="DEF4AB" folded="false" fontSize="medium" height="800" id="Note3" textColor="444444" width="1100" x="4450" y="-75">
<attr name="text"><![CDATA[h3. Generate Output	
	* Success records output
	* Failed records output
	* Unprocessed records	


	]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="450" id="Note4" textColor="444444" width="1350" x="3500" y="850">
<attr name="text"><![CDATA[h3. Result LOOP]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="500" id="Note2" textColor="444444" width="950" x="750" y="1300">
<attr name="text"><![CDATA[h3. Initialize Job]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Combine" guiX="1195" guiY="1000" id="COMBINE" incompleteTuples="true" type="COMBINE">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.id = $in.1.id;
	$out.0.state = $in.1.state;
	$out.0.csv = $in.0.csv;

	return ALL;
}

]]></attr>
</Node>
<Node guiName="Combine" guiX="2070" guiY="1100" id="COMBINE1" type="COMBINE">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.content = $in.1.id;
	$out.0.statusCode = $in.0.statusCode;
	$out.0.contentByte = $in.0.contentByte;
	$out.0.outputFilePath = $in.0.outputFilePath;
	$out.0.header = $in.0.header;
	$out.0.rawHeaders = $in.0.rawHeaders;
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node groupSize="${BATCH_SIZE}" guiName="Create CSV" guiX="695" guiY="1000" id="CREATE_CSV" incompleteGroupAllowed="true" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2

string body; 

function integer append() {
	if (isEmpty(body))
	{
		body = getFieldName($in.0,0);
		for (integer i = 1; i<length($in.0);i++)
		{
			body = concat(body,',',getFieldName($in.0,i));
		}	
		body = concat(body,"\n") ;	
	} 
	
	if (contains(getValueAsString($in.0,0),',')) 
	{
	 	body = concat(body, '"',getValueAsString($in.0,0),'"') ;
	}
	else if (!isNull($in.0,0))
    {
    	body = concat(body,getValueAsString($in.0,0));
    }
	
	for (integer i = 1; i<length($in.0);i++)
	{			
		
		if (contains(getValueAsString($in.0,i),',')) 
		{ 
			body = concat(body,',"',getValueAsString($in.0,i),'"');	 
	    }	    
	    else if (!isNull($in.0,i))
	    {

			if (getFieldType($in.0,i)=='date' and getFieldProperties($in.0,i)["format"] == "yyyy.MM.dd HH:mm:ss.SSS z")
			{
				body = concat(body,',',replace(date2str(getDateValue($in.0,i),'yyyy.MM.dd HH:mm:ss.SSSZ' ),' ','T'));	
			}
			else if (getFieldType($in.0,i)=='date')
			{
				body = concat(body,',',date2str(getDateValue($in.0,i),'yyyy-MM-dd'));					
			}
			else
			{
				body = concat(body,',',getValueAsString($in.0,i));
			}	
	    }
	    else
	    {
	        body = concat(body,',');	 
	    }
	
	}
	body = concat(body,"\n") ;	
	
	return OK;
}


function integer transform() {
	$out.0.csv = body;
	return OK;
}

function void clean() {
	body = "";

}

]]></attr>
</Node>
<Node guiName="CrossJoin" guiX="1620" guiY="400" id="CROSS_JOIN" type="CROSS_JOIN"/>
<Node guiName="CrossJoin" guiX="1620" guiY="575" id="CROSS_JOIN1" type="CROSS_JOIN"/>
<Node guiName="DataGenerator" guiX="1320" guiY="575" id="DATA_GENERATOR1" type="DATA_GENERATOR"/>
<Node guiName="DataGenerator" guiX="1320" guiY="300" id="DATA_GENERATOR2" type="DATA_GENERATOR"/>
<Node debugInput="true" guiName="DebugInput" guiX="45" guiY="975" id="DEBUG_INPUT" recordsNumber="0" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Dedup" guiX="695" guiY="650" id="DEDUP" type="DEDUP"/>
<Node guiName="Extract Id" guiX="1495" guiY="1450" id="EXTRACT_ID" sourceUri="port:$0.content:discrete" type="JSON_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="json_object" outPort="0">
	</Mapping>
</Mappings>]]></attr>
</Node>
<Node guiName="Filter" guiX="1395" guiY="1000" id="FILTER" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
!isEmpty($in.0.id)]]></attr>
</Node>
<Node addInputFieldsAsParameters="false" guiName="Job request initialize" guiX="1020" guiY="1450" id="JOB_REQUEST_INITIALIZE" oAuth2Connection="OAuth2Connection0" requestMethod="POST" type="HTTP_CONNECTOR" url="${JOB_URL}">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.requestContent = $in.0.json;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
X-PrettyPrint=1
]]></attr>
</Node>
<Node guiName="Reqeust Generator" guiX="770" guiY="1450" id="REQEUST_GENERATOR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
 	if (substring(lowerCase('${URL}'),0,6) != 'https:')
    {
  		$out.1.errorMessage = "Salesforce API URL must start with https:.";
		return 1;  
    }	
 
    variant varMap;
    if ('${OPERATION}' == "upsert" and !isEmpty('${EXTERNALFIELDNAME}') ) 
    {
   		 varMap = {"object" -> '${OBJECT}', 
		     	   "externalIdFieldName" -> '${EXTERNALFIELDNAME}', 
		     	   "contentType" -> '${CONTENTTYPE}', 
		     	   "operation" -> "upsert", 
		     	   "lineEnding" -> 'LF'
		     	   }; 
    	
    
    }
    else
    {
   		  varMap = {"object" -> '${OBJECT}', 
		     	    "contentType" -> '${CONTENTTYPE}', 
		     	    "operation" -> '${OPERATION}', 
		     	    "lineEnding" -> 'LF'};     
    
    }

	$out.0.json = writeJson(varMap);
	return 0;
}


]]></attr>
</Node>
<Node guiName="SimpleCopy" guiX="445" guiY="975" id="SIMPLE_COPY1" type="SIMPLE_COPY"/>
<Node guiName="SimpleCopy" guiX="1120" guiY="650" id="SIMPLE_COPY2" type="SIMPLE_COPY"/>
<Node guiName="SimpleCopy" guiX="920" guiY="1000" id="SIMPLE_COPY3" type="SIMPLE_COPY"/>
<Node guiName="SimpleCopy" guiX="1620" guiY="1000" id="SIMPLE_COPY4" type="SIMPLE_COPY"/>
<Node guiName="SubgraphInput" guiX="270" guiY="-58" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="473" name="0"/>
<Port guiY="594" name="1"/>
</Node>
<Node guiName="Trash" guiX="1920" guiY="575" id="TRASH" type="TRASH"/>
<Node guiName="Trash" guiX="1920" guiY="400" id="TRASH1" type="TRASH"/>
<Node guiName="Upload Batches" guiX="1820" guiY="1000" id="UPLOAD_BATCHES" oAuth2Connection="OAuth2Connection0" requestMethod="PUT" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.URL = '${JOB_URL}'+ $in.0.id+'/batches/';
	$out.0.requestContent = $in.0.csv;
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=text/csv
]]></attr>
</Node>
<Node guiName="Status 200?" guiX="1245" guiY="1450" id="_2" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Edge fromNode="COMBINE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge24" inPort="Port 0 (in)" metadata="Metadata5" outPort="Port 0 (out)" toNode="FILTER:0"/>
<Edge fromNode="COMBINE1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge57" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="STATUS_201:0"/>
<Edge fromNode="CREATE_CSV:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="SIMPLE_COPY3:0"/>
<Edge fromNode="CROSS_JOIN:0" guiBendpoints="" guiRouter="Manhattan" id="Edge33" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="TRASH1:0"/>
<Edge fromNode="CROSS_JOIN1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge53" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="TRASH:0"/>
<Edge fromNode="DATA_GENERATOR1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge52" inPort="Port 0 (master)" metadata="Metadata1" outPort="Port 0 (out)" toNode="CROSS_JOIN1:0"/>
<Edge fromNode="DATA_GENERATOR2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge34" inPort="Port 0 (master)" metadata="Metadata6" outPort="Port 0 (out)" toNode="CROSS_JOIN:0"/>
<Edge fromNode="DEBUG_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge41" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT:0"/>
<Edge fromNode="DEDUP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge32" inPort="Port 0 (in)" outPort="Port 0 (unique)" toNode="SIMPLE_COPY2:0"/>
<Edge fromNode="EXTRACT_ID:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 1 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="COMBINE:1"/>
<Edge fromNode="FILTER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="SIMPLE_COPY4:0"/>
<Edge fromNode="JOB_REQUEST_INITIALIZE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="_2:0"/>
<Edge fromNode="JOB_REQUEST_INITIALIZE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge27" inPort="Port 6 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:6"/>
<Edge fromNode="REQEUST_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="JOB_REQUEST_INITIALIZE:0"/>
<Edge fromNode="REQEUST_GENERATOR:1" guiBendpoints="" guiRouter="Manhattan" id="Edge35" inPort="Port 3 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER2:3"/>
<Edge fromNode="SIMPLE_COPY1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge31" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEDUP:0"/>
<Edge fromNode="SIMPLE_COPY1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge30" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="CREATE_CSV:0"/>
<Edge fromNode="SIMPLE_COPY2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge50" inPort="Port 1 (slave)" outPort="Port 0 (out)" toNode="CROSS_JOIN:1"/>
<Edge fromNode="SIMPLE_COPY2:1" guiBendpoints="" guiRouter="Manhattan" id="Edge51" inPort="Port 1 (slave)" outPort="Port 1 (out)" toNode="CROSS_JOIN1:1"/>
<Edge fromNode="SIMPLE_COPY3:0" guiBendpoints="" guiRouter="Manhattan" id="Edge54" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="COMBINE:0"/>
<Edge fromNode="SIMPLE_COPY3:1" guiBendpoints="" guiRouter="Manhattan" id="Edge55" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="REQEUST_GENERATOR:0"/>
<Edge fromNode="SIMPLE_COPY4:0" guiBendpoints="" guiRouter="Manhattan" id="Edge56" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="UPLOAD_BATCHES:0"/>
<Edge fromNode="SIMPLE_COPY4:1" guiBendpoints="" guiRouter="Manhattan" id="Edge58" inPort="Port 1 (in)" outPort="Port 1 (out)" toNode="COMBINE1:1"/>
<Edge fromNode="SUBGRAPH_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SIMPLE_COPY1:0"/>
<Edge fromNode="UPLOAD_BATCHES:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="COMBINE1:0"/>
<Edge fromNode="UPLOAD_BATCHES:1" guiBendpoints="" guiRouter="Manhattan" id="Edge36" inPort="Port 5 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:5"/>
<Edge fromNode="_2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge25" inPort="Port 0 (input)" outPort="Port 0 (accepted)" toNode="EXTRACT_ID:0"/>
<Edge fromNode="_2:1" guiBendpoints="1767:726|1767:694" guiLocks="1767|null|null" guiRouter="Manhattan" id="Edge26" inPort="Port 3 (in)" outPort="Port 1 (rejected)" toNode="SIMPLE_GATHER:3"/>
</Phase>
<Phase number="1">
<Node guiName="Check job status" guiX="3845" guiY="1025" id="CHECK_JOB_STATUS" oAuth2Connection="OAuth2Connection0" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
    $out.0.URL = '${JOB_URL}'+ $in.0.id;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugOutput="true" guiName="DebugOutput" guiX="6020" guiY="150" id="DEBUG_OUTPUT" type="TRASH"/>
<Node debugOutput="true" guiName="DebugOutput" guiX="6020" guiY="375" id="DEBUG_OUTPUT1" type="TRASH"/>
<Node debugOutput="true" guiName="DebugOutput" guiX="6020" guiY="575" id="DEBUG_OUTPUT2" type="TRASH"/>
<Node guiName="Errror Mapping" guiX="5295" guiY="1550" id="ERRROR_MAPPING" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Errror Mapping" guiX="5295" guiY="1325" id="ERRROR_MAPPING1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.content = $in.0.content;
	$out.0.statusCode = $in.0.statusCode;
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Errror Mapping" guiX="5295" guiY="750" id="ERRROR_MAPPING2" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	
	$out.0.content = $in.0.id + ":" + $in.0.state;
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Extract State" guiX="4395" guiY="1025" id="EXTRACT_STATE" sourceUri="port:$0.content:discrete" type="JSON_EXTRACT">
<attr name="mapping"><![CDATA[<Mappings>
	<Mapping element="json_object" outPort="0">
	</Mapping>
</Mappings>]]></attr>
</Node>
<Node guiName="!Failed?" guiX="3845" guiY="725" id="FAILED1" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.state != 'Failed'
]]></attr>
</Node>
<Node guiName="failedResults" guiX="4795" guiY="375" id="FAILED_RESULTS" oAuth2Connection="OAuth2Connection0" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
    $out.0.URL = '${JOB_URL}'+ $in.0.id + '/failedResults/';

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Init Loop" guiX="3320" guiY="1000" id="INIT_LOOP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
   variant resp = parseJson($in.0.content);
   $out.0.id = cast(resp["id"], string);     
   
   $out.0.state = 'init';
   
    
	return ALL;
}
]]></attr>
</Node>
<Node addInputFieldsAsParameters="false" guiName="Job request complete" guiX="2795" guiY="1000" id="JOB_REQUEST_COMPLETE" oAuth2Connection="OAuth2Connection0" requestMethod="PATCH" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.requestContent = $in.0.json;
    $out.0.URL = '${JOB_URL}'+ $in.0.id;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
X-PrettyPrint=1
]]></attr>
</Node>
<Node guiName="Loop" guiX="3570" guiY="1000" id="LOOP" type="LOOP">
<attr name="whileCondition"><![CDATA[//#CTL2
$in.0.state != 'JobComplete' and $in.0.state != 'Failed' ]]></attr>
</Node>
<Node guiName="Normalizer" guiX="5295" guiY="175" id="NORMALIZER" normalizeURL="${TRANS_DIR}/normalizeOutput.ctl" type="NORMALIZER"/>
<Node guiName="Normalizer" guiX="5295" guiY="575" id="NORMALIZER1" normalizeURL="${TRANS_DIR}/normalizeOutput.ctl" type="NORMALIZER"/>
<Node guiName="Normalizer" guiX="5295" guiY="375" id="NORMALIZER2" normalizeURL="${TRANS_DIR}/normalizeOutput.ctl" type="NORMALIZER"/>
<Node guiName="Set UploadComplete" guiX="2570" guiY="1000" id="SET_UPLOAD_COMPLETE" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
    variant varMap = {"state" -> "UploadComplete"}; // map
	$out.0.json = writeJson(varMap);
	$out.0.id = $in.0.content;
	return ALL;
}

]]></attr>
</Node>
<Node guiName="SimpleCopy" guiX="4470" guiY="350" id="SIMPLE_COPY" type="SIMPLE_COPY"/>
<Node guiName="SimpleGather" guiX="5095" guiY="1325" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node guiName="SimpleGather" guiX="5095" guiY="1550" id="SIMPLE_GATHER1" type="SIMPLE_GATHER"/>
<Node guiName="SimpleGather" guiX="5620" guiY="750" id="SIMPLE_GATHER2" type="SIMPLE_GATHER"/>
<Node delay="1000" guiName="Sleep" guiX="4645" guiY="1025" id="SLEEP" type="SLEEP"/>
<Node guiName="Status 200?" guiX="3045" guiY="1000" id="STATUS_200" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Node guiName="Status 201" guiX="2295" guiY="1000" id="STATUS_201" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 201]]></attr>
</Node>
<Node guiName="SubgraphOutput" guiX="5870" guiY="-58" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="67" name="0"/>
<Port guiY="170" name="1"/>
<Port guiY="272" name="2"/>
<Port guiY="372" name="3"/>
<Port guiY="412" name="4"/>
</Node>
<Node guiName="successfulResults" guiX="4795" guiY="175" id="SUCCESSFUL_RESULTS" oAuth2Connection="OAuth2Connection0" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
    $out.0.URL = '${JOB_URL}'+  $in.0.id + '/successfulResults/';
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="unprocessedRecords" guiX="4795" guiY="575" id="UNPROCESSED_RECORDS" oAuth2Connection="OAuth2Connection0" type="HTTP_CONNECTOR">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
    $out.0.URL = '${JOB_URL}'+  $in.0.id + '/unprocessedRecords/';

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Status 200?" guiX="4095" guiY="1025" id="_1" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Edge fromNode="CHECK_JOB_STATUS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge16" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="_1:0"/>
<Edge fromNode="CHECK_JOB_STATUS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge38" inPort="Port 3 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:3"/>
<Edge fromNode="ERRROR_MAPPING:0" guiBendpoints="" guiRouter="Manhattan" id="Edge63" inPort="Port 2 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER2:2"/>
<Edge fromNode="ERRROR_MAPPING1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge62" inPort="Port 1 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SIMPLE_GATHER2:1"/>
<Edge fromNode="ERRROR_MAPPING2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge65" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SIMPLE_GATHER2:0"/>
<Edge fromNode="EXTRACT_STATE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SLEEP:0"/>
<Edge fromNode="FAILED1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge28" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="SIMPLE_COPY:0"/>
<Edge fromNode="FAILED1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge29" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="ERRROR_MAPPING2:0"/>
<Edge fromNode="FAILED_RESULTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge23" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="NORMALIZER2:0"/>
<Edge fromNode="FAILED_RESULTS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge59" inPort="Port 1 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:1"/>
<Edge fromNode="INIT_LOOP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (input token)" metadata="Metadata2" outPort="Port 0 (out)" toNode="LOOP:0"/>
<Edge fromNode="JOB_REQUEST_COMPLETE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="STATUS_200:0"/>
<Edge fromNode="JOB_REQUEST_COMPLETE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge37" inPort="Port 4 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:4"/>
<Edge fromNode="LOOP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 0 (end of loop)" toNode="FAILED1:0"/>
<Edge fromNode="LOOP:1" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 1 (continue loop)" toNode="CHECK_JOB_STATUS:0"/>
<Edge fromNode="NORMALIZER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge67" inPort="Port 0 (in)" metadataRef="#//Edge33" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge fromNode="NORMALIZER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge40" inPort="Port 2 (in)" metadataRef="#//Edge5" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:2"/>
<Edge fromNode="NORMALIZER2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge39" inPort="Port 1 (in)" metadataRef="#//Edge53" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="SET_UPLOAD_COMPLETE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="JOB_REQUEST_COMPLETE:0"/>
<Edge fromNode="SIMPLE_COPY:0" guiBendpoints="" guiRouter="Manhattan" id="Edge19" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUCCESSFUL_RESULTS:0"/>
<Edge fromNode="SIMPLE_COPY:1" guiBendpoints="" guiRouter="Manhattan" id="Edge20" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FAILED_RESULTS:0"/>
<Edge fromNode="SIMPLE_COPY:2" guiBendpoints="" guiRouter="Manhattan" id="Edge21" inPort="Port 0 (in)" outPort="Port 2 (out)" toNode="UNPROCESSED_RECORDS:0"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge49" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="ERRROR_MAPPING1:0"/>
<Edge fromNode="SIMPLE_GATHER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge61" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="ERRROR_MAPPING:0"/>
<Edge fromNode="SIMPLE_GATHER2:0" guiBendpoints="" guiRouter="Manhattan" id="Edge64" inPort="Port 3 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:3"/>
<Edge fromNode="SLEEP:0" guiBendpoints="3850:501|3850:589|2835:589|2835:502" guiLocks="3850|2835|589" guiRouter="Manual" id="Edge17" inPort="Port 1 (back from loop)" outPort="Port 0 (out)" toNode="LOOP:1"/>
<Edge fromNode="STATUS_200:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="INIT_LOOP:0"/>
<Edge fromNode="STATUS_200:1" guiBendpoints="" guiRouter="Manhattan" id="Edge47" inPort="Port 1 (in)" outPort="Port 1 (rejected)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="STATUS_201:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="SET_UPLOAD_COMPLETE:0"/>
<Edge fromNode="STATUS_201:1" guiBendpoints="" guiRouter="Manhattan" id="Edge46" inPort="Port 2 (in)" outPort="Port 1 (rejected)" toNode="SIMPLE_GATHER:2"/>
<Edge fromNode="SUBGRAPH_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge43" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="DEBUG_OUTPUT:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge44" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="DEBUG_OUTPUT1:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT:2" guiBendpoints="" guiRouter="Manhattan" id="Edge45" inPort="Port 0 (in)" outPort="Port 2 (out)" toNode="DEBUG_OUTPUT2:0"/>
<Edge fromNode="SUCCESSFUL_RESULTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge18" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="NORMALIZER:0"/>
<Edge fromNode="SUCCESSFUL_RESULTS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge60" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:0"/>
<Edge fromNode="UNPROCESSED_RECORDS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge22" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="NORMALIZER1:0"/>
<Edge fromNode="UNPROCESSED_RECORDS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge42" inPort="Port 2 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER1:2"/>
<Edge fromNode="_1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (input)" outPort="Port 0 (accepted)" toNode="EXTRACT_STATE:0"/>
<Edge fromNode="_1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge48" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="SIMPLE_GATHER:0"/>
</Phase>
</Graph>
