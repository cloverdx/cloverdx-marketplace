<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" created="Thu Dec 08 11:26:52 EST 2022" description="Initialize Library" guiVersion="5.17.0.3" id="1670535088744" licenseCode="CLCDSCLOVE72646208SP" name="initMetadata" nature="jobflow" showComponentDetails="true">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="jobInput" recordDelimiter="\n" type="delimited">
<Field name="objectsParam" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="objects" recordDelimiter="\n" type="delimited">
<Field name="object" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter name="INIT_META_FOR_OBJECTS" value="Lead;Account;Opportunity;Campaign">
<attr name="description"><![CDATA[Semicolon separated list of Salesforce objects for which to extract metadata. Do not add spaces to the list, only ';' as separator]]></attr>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="library.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FAF6D6" folded="false" fontSize="medium" height="183" id="Note0" textColor="444444" width="473" x="163" y="71">
<attr name="text"><![CDATA[h3. INPUT PARAMETERS

* INIT_META_FOR_OBJECT - semicolon-separated list of objects in Salesforce. Please verify object is valid at: [Salesforce Standard Objects|https://developer.salesforce.com/docs/atlas.en-us.object_reference.meta/object_reference/sforce_api_objects_list.htm]]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Add Lables To Metadata" guiX="957" guiY="288" id="ADD_LABLES_TO_METADATA" jobURL="${GRAPH_DIR}/addMetaLabels.grf" type="EXECUTE_GRAPH">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.OBJECT = $in.0.object;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node errorMessage="Init Graph Failed" guiName="Fail" guiX="1203" guiY="503" id="FAIL" type="FAIL"/>
<Node errorMessage="Init Graph Failed" guiName="Fail" guiX="1203" guiY="399" id="FAIL1" type="FAIL"/>
<Node guiName="GetJobInput" guiX="171" guiY="288" id="GET_JOB_INPUT" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.objectsParam = getParamValue("INIT_META_FOR_OBJECTS");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Get Metadata for Object" guiX="645" guiY="288" id="GET_METADATA_FOR_OBJECT" jobURL="${SUBGRAPH_DIR}/getSalesforceObjectMetadata.sgrf" type="EXECUTE_GRAPH">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.OBJECT = $in.0.object;
	$out.1.SF_USERNAME = getParamValue("SALESFORCE_USER");
	$out.1.SF_PASSWORD = getParamValue("SALESFORCE_PASSWORD");
	$out.1.SF_TOKEN = getParamValue("SALESFORCE_SECURITY_TOKEN");
	$out.1.WRITE_FIELDS_INTO_CTL_FILE = "true";

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="outputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.object = $in.0.object;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Normalize objects" guiX="417" guiY="288" id="NORMALIZE_OBJECTS" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.

string[] objects;

// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.
function integer count() {
	
	objects = split($in.0.objectsParam, ";");
	return length(objects);	

}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	
	$out.0.object = trim(objects[idx]);

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Success" guiX="1203" guiY="288" id="SUCCESS" type="SUCCESS"/>
<Edge fromNode="ADD_LABLES_TO_METADATA:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUCCESS:0"/>
<Edge fromNode="ADD_LABLES_TO_METADATA:1" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 1 (error)" toNode="FAIL1:0"/>
<Edge fromNode="GET_JOB_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="NORMALIZE_OBJECTS:0"/>
<Edge fromNode="GET_METADATA_FOR_OBJECT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadataRef="#//Edge1" outPort="Port 0 (out)" toNode="ADD_LABLES_TO_METADATA:0"/>
<Edge fromNode="GET_METADATA_FOR_OBJECT:1" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 1 (error)" toNode="FAIL:0"/>
<Edge fromNode="NORMALIZE_OBJECTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="GET_METADATA_FOR_OBJECT:0"/>
</Phase>
</Graph>
