<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="writers" created="Thu Feb 27 19:43:48 CET 2025" description="Approve rows in the reference data set." guiVersion="7.1.0.8" id="1740687645580" largeIconPath="${PROJECT}/icons/ReferenceDataSetApproveRow64.png" licenseCode="CLCDSCLOVE24765514SP" mediumIconPath="${PROJECT}/icons/ReferenceDataSetApproveRow48.png" name="ReferenceDataSetApproveRow" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icons/ReferenceDataSetApproveRow16.png">
<Global>
<inputPorts>
<singlePort connected="false" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="false" name="0"/>
<singlePort connected="false" keepEdge="false" name="1" required="false"/>
</outputPorts>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="JSON" recordDelimiter="\r\n" type="delimited">
<Field name="json" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="ReferenceDataSetApproveOutput" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="dataSetCode" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="RowId" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="rowId" type="long"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enableWhenOutputPort1IsDisconnected" guiName="Fail" guiX="1520" guiY="450" id="FAIL" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Filter" guiX="895" guiY="100" id="FILTER1" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Node guiName="Format error" guiX="1120" guiY="250" id="FORMAT_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import "${TRANS_DIR}/ApiFailReporter.ctl";
// Transforms input record into output record.
function integer transform() {
	mapErrorMessage();
	return ALL;
}]]></attr>
</Node>
<Node guiName="Format output" guiX="1120" guiY="100" id="FORMAT_OUTPUT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.dataSetCode = getParamValue("DATA_SET_CODE");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node fileURL="port:$0.json:discrete" guiName="JSONWriter" guiX="345" guiY="100" id="JSONWRITER1" recordsPerFile="1" type="JSON_WRITER">
<attr name="mapping"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:clover="http://www.cloveretl.com/ns/xmlmapping" clover:inPort="0">
  <clover:collection clover:name="rowIds">
    <item>$0.rowId</item>
  </clover:collection>
</root>]]></attr>
</Node>
<Node guiName="POST reference-data-sets/rows/approve" guiX="545" guiY="100" id="POST_REFERENCE_DATA_SETS_ROWS_APPROVE" requestMethod="POST" type="HTTP_CONNECTOR" url="${API_URL}/reference-data-sets/*{dataSetCode}/rows/approve">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.errorMessage = $in.1.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.requestContent = $in.0.json;

	return ALL;
}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.* = $in.1.*;

	return ALL;
}
]]></attr>
</Node>
<Node guiName="SimpleGather" guiX="1345" guiY="350" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node guiName="SubgraphInput" guiX="270" guiY="5" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="117" name="0"/>
<Port guiY="192" name="1"/>
</Node>
<Node guiName="SubgraphOutput" guiX="1695" guiY="5" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="117" name="0"/>
<Port guiY="192" name="1"/>
<Port guiY="267" name="2"/>
</Node>
<Edge fromNode="FILTER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="FORMAT_OUTPUT:0"/>
<Edge fromNode="FILTER1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="FORMAT_ERROR:0"/>
<Edge fromNode="FORMAT_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:0"/>
<Edge fromNode="FORMAT_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="JSONWRITER1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="POST_REFERENCE_DATA_SETS_ROWS_APPROVE:0"/>
<Edge fromNode="POST_REFERENCE_DATA_SETS_ROWS_APPROVE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="FILTER1:0"/>
<Edge fromNode="POST_REFERENCE_DATA_SETS_ROWS_APPROVE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 1 (in)" outPort="Port 1 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:1"/>
<Edge fromNode="SIMPLE_GATHER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FAIL:0"/>
<Edge fromNode="SUBGRAPH_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="JSONWRITER1:0"/>
</Phase>
</Graph>
