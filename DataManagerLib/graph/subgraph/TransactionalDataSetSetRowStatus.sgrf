<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="writers" created="Mon Aug 26 15:17:52 CEST 2024" description="Set status of a row in a transactional data set." guiVersion="7.1.0.8" id="1717596816267" largeIconPath="${PROJECT}/icons/TransactionalDataSetSetRowStatus64.png" licenseCode="CloverDX-Internal-License" mediumIconPath="${PROJECT}/icons/TransactionalDataSetSetRowStatus48.png" name="TransactionalDataSetSetRowStatus" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icons/TransactionalDataSetSetRowStatus16.png">
<Global>
<inputPorts>
<singlePort connected="false" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="false" name="0"/>
<singlePort connected="false" keepEdge="false" name="1" required="false"/>
</outputPorts>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="RowCollection" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="dataSetCode" type="string"/>
<Field name="newStatusMethod" type="string"/>
<Field containerType="list" name="rowIds" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="RowStatusChange" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="dataSetCode" type="string"/>
<Field name="rowId" type="long"/>
<Field name="newStatus" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata1">
<Record fieldDelimiter="|" name="TransactinalDataSetSetRowStatustErrorOutput" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="dataSetCode" type="string"/>
<Field name="errorMessage" type="string"/>
<Field containerType="list" name="rowIds" type="long"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="TransactinalDataSetSetRowStatustOutput" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="dataSetCode" type="string"/>
<Field containerType="list" name="rowIds" type="long"/>
</Record>
</Metadata>
<Metadata id="HTTPConnector_Response">
<Record fieldDelimiter="|" name="UpdateStatusCall" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="content" type="string"/>
<Field name="contentByte" type="byte"/>
<Field name="outputFilePath" type="string"/>
<Field name="statusCode" trim="true" type="integer"/>
<Field containerType="map" name="header" type="string"/>
<Field containerType="list" name="rawHeaders" type="string"/>
<Field name="errorMessage" type="string"/>
<Field name="dataSetCode" type="string"/>
<Field name="newStatusMethod" type="string"/>
<Field containerType="list" name="rowIds" type="long"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter defaultHint="Specify data set to work with" label="Data set code" name="DATA_SET_CODE" public="true"/>
<GraphParameter label="New status" name="NEW_STATUS" public="true">
<SingleType allowCustomValues="false" name="simpleEnum" values="EDITED;APPROVED"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="library.prm"/>
<GraphParameterFile fileURL="data-manager-api.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Call ok?" guiX="1170" guiY="100" id="CALL_OK" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Node guiName="Collect" guiX="670" guiY="100" id="COLLECT" key="dataSetCode(a);newStatus(a)" type="DENORMALIZER">
<attr name="denormalize"><![CDATA[//#CTL2
string dataSetCode;
string newStatus;
long[] rowIds = [];

function integer append() {
	dataSetCode = $in.0.dataSetCode;
	newStatus = $in.0.newStatus;
	push(rowIds, $in.0.rowId);
	
	return 0;
}

function integer transform() {
	$out.0.dataSetCode = dataSetCode;
	$out.0.newStatusMethod = getStatusMethodName(newStatus);
	$out.0.rowIds = rowIds;

	return OK;
}

function void clean() {
	clear(rowIds);
}

const map[string, string] STATUS_METHODS = {
	"NEW" -> null,
	"APPROVED" -> "approve",
	"EDITED" -> "edit",
	"DELETE" -> "delete",
	"UNDELETE" -> "undelete"
};
function string getStatusMethodName(string newStatus) {
	return STATUS_METHODS[newStatus];
}]]></attr>
</Node>
<Node guiName="ExtSort" guiX="445" guiY="100" id="EXT_SORT" sortKey="dataSetCode(a);newStatus(a)" type="EXT_SORT"/>
<Node enabled="enableWhenOutputPort1IsDisconnected" guiName="Fail" guiX="1820" guiY="500" id="FAIL1" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}
]]></attr>
</Node>
<Node guiName="Format error" guiX="1370" guiY="250" id="FORMAT_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import "${TRANS_DIR}/ApiFailReporter.ctl";
function integer transform() {
	$out.0.rowIds = $in.0.rowIds;
	$out.0.dataSetCode = $in.0.dataSetCode;

	mapErrorMessage();
	return ALL;
}
]]></attr>
</Node>
<Node guiName="Format output" guiX="1595" guiY="100" id="FORMAT_OUTPUT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	$out.0.rowIds = $in.0.rowIds;
	$out.0.dataSetCode = $in.0.dataSetCode;

	return ALL;
}
]]></attr>
</Node>
<Node guiName="Map" guiX="220" guiY="100" id="MAP1" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	$out.0.dataSetCode = nvl($in.0.dataSetCode, "${DATA_SET_CODE}");
	$out.0.rowId = $in.0.rowId;
	$out.0.newStatus = nvl($in.0.newStatus, "${NEW_STATUS}");

	return ALL;
}
]]></attr>
</Node>
<Node guiName="POST rows/{status}" guiX="895" guiY="100" id="POST_ROWS_STATUS" password="${CLOVERDX_PASS}" requestMethod="POST" type="HTTP_CONNECTOR" url="${API_URL}/transactional-data-sets/*{dataSetCode}/rows/*{newStatusMethod}" username="${CLOVERDX_USER}">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.dataSetCode = $in.0.dataSetCode;
	$out.1.errorMessage = $in.1.errorMessage;
	$out.1.rowIds = $in.0.rowIds;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

function integer transform() {
	variant selectedRows = {
		"rowIds" -> $in.0.rowIds
	};
	$out.0.requestContent = writeJson(selectedRows);
	
	printLog(info, $out.0.requestContent);

	return ALL;
}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.1.*;
	$out.0.dataSetCode = $in.0.dataSetCode;
	$out.0.newStatusMethod = $in.0.newStatusMethod;
	$out.0.rowIds = $in.0.rowIds;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
]]></attr>
</Node>
<Node guiName="SimpleGather" guiX="1595" guiY="375" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node guiName="SubgraphInput" guiX="81" guiY="5" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="117" name="0"/>
<Port guiY="187" name="1"/>
</Node>
<Node guiName="SubgraphOutput" guiX="1995" guiY="5" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="117" name="0"/>
<Port guiY="392" name="1"/>
<Port guiY="717" name="2"/>
</Node>
<Edge fromNode="CALL_OK:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="FORMAT_OUTPUT:0"/>
<Edge fromNode="CALL_OK:1" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="FORMAT_ERROR:0"/>
<Edge fromNode="COLLECT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="POST_ROWS_STATUS:0"/>
<Edge fromNode="EXT_SORT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="COLLECT:0"/>
<Edge fromNode="FORMAT_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:0"/>
<Edge fromNode="FORMAT_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="MAP1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="EXT_SORT:0"/>
<Edge fromNode="POST_ROWS_STATUS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" metadata="HTTPConnector_Response" outPort="Port 0 (out)" toNode="CALL_OK:0"/>
<Edge fromNode="POST_ROWS_STATUS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 1 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:1"/>
<Edge fromNode="SIMPLE_GATHER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FAIL1:0"/>
<Edge fromNode="SUBGRAPH_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="MAP1:0"/>
</Phase>
</Graph>
