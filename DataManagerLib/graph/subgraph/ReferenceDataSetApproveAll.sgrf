<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="writers" created="Wed Feb 05 00:04:36 CET 2025" description="Approve all rows in the selected reference data set." guiVersion="7.1.0.8" id="1738747296006" largeIconPath="${PROJECT}/icons/ReferenceDataSetApproveAll64.png" licenseCode="Unlicensed" mediumIconPath="${PROJECT}/icons/ReferenceDataSetApproveAll48.png" name="ReferenceDataSetApproveAll" nature="subgraph" showComponentDetails="true" smallIconPath="${PROJECT}/icons/ReferenceDataSetApproveAll16.png">
<Global>
<outputPorts>
<singlePort connected="false" name="0"/>
<singlePort connected="false" keepEdge="false" name="1" required="false"/>
</outputPorts>
<Metadata fileURL="${META_DIR}/ErrorOutput.fmt" id="Metadata1"/>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="debugInput1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="ReferenceDataSetApproveAllOutput" recordDelimiter="\n" type="delimited">
<Field name="dataSetCode" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter defaultHint="Specify reference data set to approve" label="Reference data set code" name="DATA_SET_CODE" public="true"/>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="library.prm"/>
<GraphParameterFile fileURL="data-manager-api.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node enabled="enableWhenOutputPort1IsDisconnected" guiName="Fail" guiX="1295" guiY="400" id="FAIL" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Format error" guiX="870" guiY="200" id="FORMAT_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2
import "${TRANS_DIR}/ApiFailReporter.ctl";
// Transforms input record into output record.
function integer transform() {
	mapErrorMessage();
	return ALL;
}]]></attr>
</Node>
<Node guiName="Format output" guiX="1095" guiY="100" id="FORMAT_OUTPUT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.dataSetCode = getParamValue("DATA_SET_CODE");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="POST approve-all" guiX="370" guiY="100" id="POST_APPROVE_ALL" password="${CLOVERDX_PASS}" requestMethod="POST" type="HTTP_CONNECTOR" url="${API_URL}/reference-data-sets/${DATA_SET_CODE}/rows/approve-all" username="${CLOVERDX_USER}">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.errorMessage = $in.1.errorMessage;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.* = $in.1.*;

	return ALL;
}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
]]></attr>
</Node>
<Node guiName="SimpleGather" guiX="1095" guiY="300" id="SIMPLE_GATHER" type="SIMPLE_GATHER"/>
<Node guiName="Status code == 200?" guiX="645" guiY="100" id="STATUS_CODE_200" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
$in.0.statusCode == 200]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="200" guiY="5" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="117" name="0"/>
</Node>
<Node guiName="SubgraphOutput" guiX="1445" guiY="5" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="117" name="0"/>
<Port guiY="192" name="1"/>
<Port guiY="267" name="2"/>
</Node>
<Edge fromNode="FORMAT_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata1" outPort="Port 0 (out)" toNode="SIMPLE_GATHER:0"/>
<Edge fromNode="FORMAT_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="POST_APPROVE_ALL:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="STATUS_CODE_200:0"/>
<Edge fromNode="POST_APPROVE_ALL:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 1 (in)" metadata="Metadata1" outPort="Port 1 (out)" toNode="SIMPLE_GATHER:1"/>
<Edge fromNode="SIMPLE_GATHER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:1"/>
<Edge fromNode="SIMPLE_GATHER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 1 (out)" toNode="FAIL:0"/>
<Edge fromNode="STATUS_CODE_200:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 0 (accepted)" toNode="FORMAT_OUTPUT:0"/>
<Edge fromNode="STATUS_CODE_200:1" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 0 (in)" outPort="Port 1 (rejected)" toNode="FORMAT_ERROR:0"/>
</Phase>
</Graph>
