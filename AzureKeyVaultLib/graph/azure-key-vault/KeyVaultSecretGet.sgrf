<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="readers" created="Thu Aug 02 10:40:41 CEST 2018" description="Query secret from Azure Key Vault including past secret version if any are available." guiVersion="6.3.0.1747" id="1533217385607" largeIconPath="${GRAPH_DIR}/azure-key-vault/azure-key-vault-64.png" licenseCode="CLP1DJAVLI69475596BY" mediumIconPath="${GRAPH_DIR}/azure-key-vault/azure-key-vault-32.png" name="KeyVaultSecretGet" nature="subgraph" showComponentDetails="true" smallIconPath="${GRAPH_DIR}/azure-key-vault/azure-key-vault-16.png">
<Global>
<outputPorts>
<singlePort connected="false" name="0"/>
<singlePort connected="false" keepEdge="true" name="1" required="false"/>
</outputPorts>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="KeyVaultError" recordDelimiter="\r\n" type="delimited">
<Field name="errorMessage" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata2">
<Record fieldDelimiter="|" name="KeyVaultSecret" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="secretName" type="string"/>
<Field name="secretValue" type="string"/>
<Field name="id" type="string"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="created" type="date"/>
<Field format="yyyy-MM-dd HH:mm:ss" name="updated" type="date"/>
<Field name="enabled" type="boolean"/>
<Field name="recoveryLevel" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="QueryParams" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="queryURL" type="string"/>
</Record>
</Metadata>
<Connection config="${OAUTH2_CONNECTION_URL}" id="OAUTH20" type="OAUTH2"/>
<GraphParameters>
<GraphParameter label="Key Vault name" name="KEY_VAULT_NAME" public="true" required="true" value="library-test"/>
<GraphParameter label="OAuth2 connection URL" name="OAUTH2_CONNECTION_URL" public="true" required="true" value="${CONN_DIR}/oauth2-azure.cfg">
<SingleType fileExtension="*.cfg" multiple="false" name="file" selectionMode="file_only"/>
</GraphParameter>
<GraphParameter label="Key Vault secret name" name="SECRET_NAME" public="true" required="true" value="password"/>
<GraphParameter label="Key Vault secret version" name="SECRET_VERSION" public="true" required="false"/>
<GraphParameter name="API_VERSION" value="7.4"/>
<GraphParameter name="MAX_RESULTS" value="25"/>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="FFBF59" folded="false" fontSize="medium" height="194" id="Note0" textColor="444444" width="292" x="477" y="371">
<attr name="text"><![CDATA[h3. Querying versions

We only do one query to list secret versions here to keep the code simple. This will return up to 25 results.

*Secrets that are modified very frequently may not work properly here - the result can be older version of the secret instead of the most recent one.*]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="Check errors and parse" guiX="1208" guiY="140" id="CHECK_ERRORS_AND_PARSE" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	if ($in.0.statusCode == 200) {
		variant response = parseJson($in.0.content);
		$out.0.id = cast(response["id"], string);
		$out.0.secretValue = cast(response["value"], string);
		$out.0.secretName = "${SECRET_NAME}";
		$out.0.enabled = cast(response["attributes"]["enabled"], boolean);
		$out.0.created = long2date(cast(response["attributes"]["created"], long));
		$out.0.updated = long2date(cast(response["attributes"]["updated"], long));
		$out.0.recoveryLevel = cast(response["attributes"]["recoveryLevel"], string);
		
		return 0;
	} else {
		$out.1.errorMessage = $in.0.content;
		return 1;
	}
}
]]></attr>
</Node>
<Node guiName="Collect errors" guiX="1422" guiY="256" id="COLLECT_ERRORS" type="SIMPLE_GATHER"/>
<Node guiName="Combine" guiX="734" guiY="140" id="COMBINE" incompleteTuples="true" type="COMBINE">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.queryURL = nvl($in.0.queryURL, getMostRecentSecretVersion($in.1.content));

	if(isBlank($out.0.queryURL)){
		$out.1.errorMessage = "Unable to get the most recent version of secret. It could be because it wasn't able to get list of all versions. Please check the OAuth connection and configuration.";
		return 1;
	}
	return 0;
}

// Extract the most recent secret version - the one that was modified last (highest timestamp).
function string getMostRecentSecretVersion(string versionsJson) {
	// API response looks like this:
	// {
	//   "value": [
	//     {
	//       "id": "https://branotestkv.vault.azure.net/secrets/password/014c90ba29684125a1ec978ca4a68230",
	//       "attributes": {
	//         "enabled": true,
	//         "created": 1588253528,
	//         "updated": 1588253528,
	//         "recoveryLevel": "Purgeable"
	//       }
	//     }
	//   ],
	//   "nextLink": null
	// }

	variant versions = parseJson(versionsJson);
	
	long mostRecentTimestamp = 0;
	string mostRecentId;

	// Walk through the elements of the "value" array
	for (integer i = 0; i < length(versions["value"]); ++i) {
		variant updatedTS = versions["value"][i]["attributes"]["updated"] : null;
		if (updatedTS != null) {
			long timestamp = cast(updatedTS, long) : cast(updatedTS, integer) : 0;
			if (timestamp >= mostRecentTimestamp) {
				mostRecentId = cast(versions["value"][i]["id"], string);
			}
		}
	}
	
	return mostRecentId;
}
]]></attr>
</Node>
<Node guiName="Fail on error" guiX="1578" guiY="256" id="FAIL_ON_ERROR" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

function integer transform() {
	if (isSubgraphOutputPortConnected(1)) {
		$out.0.errorMessage = $in.0.errorMessage;
	} else {
		raiseError($in.0.errorMessage);
	}

	return ALL;
}
]]></attr>
</Node>
<Node guiName="Filter empty error" guiX="558" guiY="285" id="FILTER_EMPTY_ERROR" type="EXT_FILTER">
<attr name="filterExpression"><![CDATA[//#CTL2
!isBlank($in.0.errorMessage)]]></attr>
</Node>
<Node guiName="Get secret value" guiX="937" guiY="140" id="GET_SECRET_VALUE" oAuth2Connection="OAUTH20" requestMethod="GET" type="HTTP_CONNECTOR">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.1.errorMessage = "Error querying secret value: " + $in.1.errorMessage;

	return ALL;
}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.URL = $in.0.queryURL;
	$out.3.api_version = "${API_VERSION}";

	return ALL;
}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.* = $in.1.*;

	return ALL;
}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
]]></attr>
<attr name="requestParameters"><![CDATA[api-version=
]]></attr>
</Node>
<Node guiName="Get secret versions" guiX="552" guiY="183" id="GET_SECRET_VERSIONS1" oAuth2Connection="OAUTH20" requestMethod="GET" type="HTTP_CONNECTOR" url="https://${KEY_VAULT_NAME}.vault.azure.net/secrets/${SECRET_NAME}/versions">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.1.errorMessage = "Unable to query secret versions: " + $in.1.errorMessage;

	return ALL;
}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.3.maxresults = getParamValue("MAX_RESULTS");
	$out.3.api_version = getParamValue("API_VERSION");

	return ALL;
}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

function integer transform() {
	$out.0.* = $in.1.*;

	return ALL;
}
]]></attr>
<attr name="headerProperties"><![CDATA[Content-Type=application/json
]]></attr>
<attr name="requestParameters"><![CDATA[api-version=
maxresults=
]]></attr>
</Node>
<Node guiName="Prepare query and check inputs" guiX="293" guiY="140" id="PREPARE_QUERY_AND_CHECK_INPUTS" recordsNumber="1" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2
string[] paramsToTest = ["KEY_VAULT_NAME", "SECRET_NAME", "API_VERSION"];
string[] errors = [];

function integer generate() {
	
	foreach(string param: paramsToTest){
		if(isBlank(getParamValue(param))){
			errors.push(param);
		}
	}
	
	if(length(errors)>0){
		$out.2.errorMessage = "Configuration error, missing the following param"+(length(errors)>1?"s":"")+": "+join(", ", errors)+".";
		return 2;
	}
	
	if (!isBlank(getParamValue("SECRET_VERSION"))) {
		// Version is set, use it to construct the URL.
		$out.0.queryURL = "https://${KEY_VAULT_NAME}.vault.azure.net/secrets/${SECRET_NAME}/${SECRET_VERSION}";
		
		return 0;
	}
	
	return ALL;
	

}
]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="228" guiY="10" id="SUBGRAPH_INPUT" type="SUBGRAPH_INPUT">
<Port guiY="162" name="0"/>
</Node>
<Edge fromNode="CHECK_ERRORS_AND_PARSE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 0 (in)" metadata="Metadata2" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:0"/>
<Edge fromNode="CHECK_ERRORS_AND_PARSE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="COLLECT_ERRORS:0"/>
<Edge fromNode="COLLECT_ERRORS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge11" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="FAIL_ON_ERROR:0"/>
<Edge fromNode="COMBINE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge13" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="GET_SECRET_VALUE:0"/>
<Edge fromNode="COMBINE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 4 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="COLLECT_ERRORS:4"/>
<Edge fromNode="FAIL_ON_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT:1"/>
<Edge fromNode="FILTER_EMPTY_ERROR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge15" inPort="Port 3 (in)" outPort="Port 0 (accepted)" toNode="COLLECT_ERRORS:3"/>
<Edge fromNode="GET_SECRET_VALUE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="CHECK_ERRORS_AND_PARSE:0"/>
<Edge fromNode="GET_SECRET_VALUE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 1 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="COLLECT_ERRORS:1"/>
<Edge fromNode="GET_SECRET_VERSIONS1:0" guiBendpoints="" guiRouter="Manhattan" id="Edge6" inPort="Port 1 (in)" outPort="Port 0 (out)" toNode="COMBINE:1"/>
<Edge fromNode="GET_SECRET_VERSIONS1:1" guiBendpoints="" guiRouter="Manhattan" id="Edge12" inPort="Port 2 (in)" metadata="Metadata0" outPort="Port 1 (out)" toNode="COLLECT_ERRORS:2"/>
<Edge fromNode="PREPARE_QUERY_AND_CHECK_INPUTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge4" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="COMBINE:0"/>
<Edge fromNode="PREPARE_QUERY_AND_CHECK_INPUTS:1" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 1 (out)" toNode="GET_SECRET_VERSIONS1:0"/>
<Edge fromNode="PREPARE_QUERY_AND_CHECK_INPUTS:2" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 2 (out)" toNode="FILTER_EMPTY_ERROR:0"/>
</Phase>
<Phase number="1">
<Node guiName="SubgraphOutput" guiX="1734" guiY="10" id="SUBGRAPH_OUTPUT" type="SUBGRAPH_OUTPUT">
<Port guiY="157" name="0"/>
<Port guiY="273" name="1"/>
<Port guiY="302" name="2"/>
</Node>
</Phase>
</Graph>
