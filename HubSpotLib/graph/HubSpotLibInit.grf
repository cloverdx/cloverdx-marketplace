<?xml version="1.0" encoding="UTF-8"?>
<Graph author="Krystof K" created="Thu Dec 01 09:23:27 CET 2022" guiVersion="5.17.0.3" id="1669896122031" licenseCode="CLCDSCLOVE72646208SP" name="HubSpotLibInit" showComponentDetails="true">
<Global>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="InitializationToken" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="objects" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter name="OBJECTS" public="true" value="contacts, companies, deals, line_items, products, tickets"/>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="library.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="GetJobInput" guiX="215" guiY="282" id="GET_JOB_INPUT" type="GET_JOB_INPUT">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.objects = getParamValue("OBJECTS");
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="HubSpotLib Initialization Fail" guiX="1177" guiY="375" id="HUB_SPOT_LIB_INITIALIZATION_FAIL" type="FAIL">
<attr name="mapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.errorMessage = $in.0.errMessage;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="MetaAndMappingGenerator" guiX="787" guiY="282" id="META_AND_MAPPING_GENERATOR" jobURL="${GRAPH_DIR}/MetaAndMappingGenerator.grf" type="EXECUTE_GRAPH">
<attr name="inputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.OBJECT = $in.0.objects;
	$out.1.HUBSPOT_OAUTH2_CONNECTION = getParamValue("HUBSPOT_OAUTH2_CONNECTION");
	$out.1.HUBSPOT_PRIVATE_APP_TOKEN = getParamValue("HUBSPOT_PRIVATE_APP_TOKEN");
	$out.0.executionLabel = $in.0.objects;
	return ALL;
}
]]></attr>
<attr name="errorMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.* = $in.1.*;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Normalize objects" guiX="475" guiY="282" id="NORMALIZE_OBJECTS" type="NORMALIZER">
<attr name="normalize"><![CDATA[//#CTL2
// This transformation defines the way in which a single input record is normalized
// into multiple output records.
list[string] objectsLst;
// This function is called for all input records.
// It parses each single input record and returns the number of records
// that should be created from such input record.
function integer count() {
	objectsLst = split($in.0.objects, ",");
	return length(objectsLst);
}

// This function creates new records for the output, based on single input record
// that has been parsed by the count() function.
// It is called count() times for each input record.
// The idx argument specifies which output record is being created,
// its values range is from 0 to count() - 1.
function integer transform(integer idx) {
	
	$out.0.objects = trim(objectsLst[idx]);

	return OK;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if count() throws an exception.
// function integer countOnError(string errorMessage, string stackTrace) {
//}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace, integer idx) {
// }

// Called after transform(count-1) to return the resources that have been used to their initial state
// so that next input record may be parsed.
// function void clean() {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Success" guiX="1183" guiY="282" id="SUCCESS" type="SUCCESS"/>
<Edge fromNode="GET_JOB_INPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="NORMALIZE_OBJECTS:0"/>
<Edge fromNode="META_AND_MAPPING_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUCCESS:0"/>
<Edge fromNode="META_AND_MAPPING_GENERATOR:1" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" outPort="Port 1 (error)" toNode="HUB_SPOT_LIB_INITIALIZATION_FAIL:0"/>
<Edge fromNode="NORMALIZE_OBJECTS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata0" outPort="Port 0 (out)" toNode="META_AND_MAPPING_GENERATOR:0"/>
</Phase>
</Graph>
