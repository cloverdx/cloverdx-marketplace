<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="transformers" created="Sun Mar 27 00:58:15 CET 2022" description="Decrypt a file previously encrypted with EncryptFile and save output to another file." guiVersion="5.15.0.15" id="1648506101686" largeIconPath="${SUBGRAPH_DIR}/Decrypt64.png" licenseCode="Unlicensed" mediumIconPath="${SUBGRAPH_DIR}/Decrypt32.png" name="EncryptFile" nature="subgraph" showComponentDetails="true" smallIconPath="${SUBGRAPH_DIR}/Decrypt16.png">
<Global>
<inputPorts>
<singlePort connected="false" name="0"/>
</inputPorts>
<outputPorts>
<singlePort connected="false" name="0"/>
</outputPorts>
<Metadata id="Metadata0">
<Record fieldDelimiter="|" name="debugInput1" recordDelimiter="\r\n" type="delimited">
<Field name="field1" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter label="Crypto transformation name (algorithm/mode/padding)" name="CIPHER_NAME" public="true" required="false">
<attr name="description"><![CDATA[Crypto transformation name (algorithm/mode/padding).

Algorithm is one of transformation algorithms available on the system.
Mode is a block cipher mode. There are many modes available, for generic and secure encryption use CTR mode.
Padding defines padding to use. If you use CTR mode (streaming), you can use NOPADDING.]]></attr>
</GraphParameter>
<GraphParameter label="Key algorithm name" name="KEY_ALGORITHM_NAME" public="true" required="false" secure="false">
<attr name="description"><![CDATA[Specify the name of the algorithm to use to generate encryption key form the provided password.]]></attr>
</GraphParameter>
<GraphParameter label="Key generator iterations" name="ITERATIONS" public="true" required="false">
<attr name="description"><![CDATA[Number of iterations (of hashing) executed by the key generation algorithm.]]></attr>
</GraphParameter>
<GraphParameter label="Length of key in bits" name="KEY_LENGTH_BITS" public="true" required="false">
<attr name="description"><![CDATA[The length of the key that will be generated by the key generation algorithm.]]></attr>
</GraphParameter>
<GraphParameter category="advanced" label="Read/write block size (B)" name="READ_WRITE_BLOCK_SIZE" public="true" required="false">
<attr name="description"><![CDATA[Size of buffer used by the component for reading/writing streams.]]></attr>
</GraphParameter>
<GraphParameter label="Output base directory" name="OUTPUT_DIRECTORY" public="true">
<attr name="description"><![CDATA[The final output path will be the concatenation of this path and the path passed in on the input edge.]]></attr>
<SingleType multiple="false" name="file" selectionMode="directory_only"/>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
</GraphParameters>
<Dictionary/>
</Global>
<Phase number="0">
<Node guiName="EncryptDecrypt" guiX="455" guiY="100" id="ENCRYPT_DECRYPT" jobURL="${SUBGRAPH_DIR}/EncryptDecrypt.sgrf" type="SUBGRAPH">
<attr name="__ENCRYPT_OR_DECRYPT"><![CDATA[decrypt]]></attr>
<attr name="__CIPHER_NAME"><![CDATA[${CIPHER_NAME}]]></attr>
<attr name="__READ_WRITE_BLOCK_SIZE"><![CDATA[${READ_WRITE_BLOCK_SIZE}]]></attr>
<attr name="__KEY_ALGORITHM_NAME"><![CDATA[${KEY_ALGORITHM_NAME}]]></attr>
<attr name="__ITERATIONS"><![CDATA[${ITERATIONS}]]></attr>
<attr name="__KEY_LENGTH_BITS"><![CDATA[${KEY_LENGTH_BITS}]]></attr>
</Node>
<Node guiName="Map" guiX="268" guiY="100" id="MAP" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;
	$out.0.outputFileName = getParamValue('OUTPUT_DIRECTORY') + "/" + $in.0.outputFileName;
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="200" guiY="10" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="117" name="0"/>
<Port guiY="187" name="1"/>
</Node>
<Node guiName="SubgraphOutput" guiX="800" guiY="10" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="117" name="0"/>
<Port guiY="187" name="1"/>
</Node>
<Edge fromNode="ENCRYPT_DECRYPT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="MAP:0" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="ENCRYPT_DECRYPT:0"/>
<Edge fromNode="SUBGRAPH_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadataRef="#//Edge0" outPort="Port 0 (out)" toNode="MAP:0"/>
</Phase>
</Graph>
