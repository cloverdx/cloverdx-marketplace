<?xml version="1.0" encoding="UTF-8"?>
<Graph author="CloverDX" category="fileOperations" created="Thu Feb 04 23:00:03 CET 2021" description="Implementation of the Copy File operation, which copies a blob or file to a destination file within the storage account." guiVersion="6.5.0.9" id="1612516425224" largeIconPath="${SUBGRAPH_DIR}/icons/azure-file-storage-icon-64x64.png" licenseCode="CLP1DCLOVE28718064BY" mediumIconPath="${SUBGRAPH_DIR}/icons/azure-file-storage-icon-32x32.png" name="CopyAzureFSFiles" nature="subgraph" showComponentDetails="true" smallIconPath="${SUBGRAPH_DIR}/icons/azure-file-storage-icon-16x16.png">
<Global>
<inputPorts>
<singlePort connected="true" keepEdge="true" name="0" required="false"/>
</inputPorts>
<outputPorts>
<singlePort connected="true" name="0"/>
<singlePort connected="false" keepEdge="false" name="1" required="false"/>
</outputPorts>
<Metadata id="HTTPConnector_Response">
<Record fieldDelimiter="|" name="CopyError" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="sourcePath" type="string"/>
<Field name="targetPath" type="string"/>
<Field name="statusCode" trim="true" type="integer"/>
<Field name="errorMessage" type="string"/>
<Field name="errorDetails" type="string"/>
<Field name="rawErrorResponse" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata4">
<Record fieldDelimiter="|" name="CopyFileOutput" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="sourcePath" type="string"/>
<Field name="targetPath" type="string"/>
<Field name="status" type="boolean"/>
<Field name="xMsCopyId" type="string"/>
<Field name="xMsCopyStatus" type="string"/>
</Record>
</Metadata>
<Metadata id="HTTPConnector_Error">
<Record fieldDelimiter="|" name="HTTPConnector_Error" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="sourcePath" type="string"/>
<Field name="targetPath" type="string"/>
<Field name="errorMessage" type="string"/>
</Record>
</Metadata>
<Metadata id="HTTPConnector_Response1">
<Record fieldDelimiter="|" name="HTTPConnector_Response" previewAttachmentCharset="UTF-8" recordDelimiter="\n" type="delimited">
<Field name="sourcePath" type="string"/>
<Field name="targetPath" type="string"/>
<Field name="content" type="string"/>
<Field name="contentByte" type="byte"/>
<Field name="outputFilePath" type="string"/>
<Field name="statusCode" trim="true" type="integer"/>
<Field containerType="map" name="header" type="string"/>
<Field containerType="list" name="rawHeaders" type="string"/>
<Field name="errorMessage" type="string"/>
</Record>
</Metadata>
<Metadata id="Metadata3">
<Record fieldDelimiter="|" name="Paths" previewAttachmentCharset="UTF-8" recordDelimiter="\r\n" type="delimited">
<Field name="sourcePath" type="string"/>
<Field name="targetPath" type="string"/>
</Record>
</Metadata>
<GraphParameters>
<GraphParameter defaultHint="Specifiy relative source path of the resource within the file share, or provide the values via the input port." label="Source file path" name="SOURCE_PATH" public="true">
<attr name="description"><![CDATA[Provide the relative source path of the resource within the file share. The path should not start with a leading slash, as these will be automatically removed.]]></attr>
</GraphParameter>
<GraphParameter defaultHint="Specifiy relative target path of the resource within the file share, or provide the values via the input port." label="Target file path" name="TARGET_PATH" public="true">
<attr name="description"><![CDATA[
Specify the relative target path of the resource within the file share. The value must include the full path of the resource, including the filename. Providing only the directory path will cause the copy operation to fail. The path should not begin with a leading slash, as any leading slash will be automatically removed.]]></attr>
</GraphParameter>
<GraphParameterFile fileURL="workspace.prm"/>
<GraphParameterFile fileURL="azure.prm"/>
</GraphParameters>
<RichTextNote backgroundColor="444444" folded="false" fontSize="medium" height="56" id="Note0" textColor="FFFFFF" width="632" x="299" y="-288">
<attr name="text"><![CDATA[h3. Copy Files]]></attr>
</RichTextNote>
<RichTextNote backgroundColor="ECF0F0" folded="false" fontSize="medium" height="285" id="Note1" textColor="444444" width="632" x="299" y="-235">
<attr name="text"><![CDATA[Documentation of the service [https://docs.microsoft.com/en-us/rest/api/storageservices/copy-file ]

*Required attributes*

* source path
* target path

This subgraph can take the attributes either from input port or from graph parameters. If they are both specified, attributes from the input edge are used

*Output*

* status - boolean A successful operation returns status code 202 (Accepted).  True, if the status code is 202
* _x-ms-copy-id_ - String identifier for this copy operation. Use with Get File or Get File Properties to check the status of this copy operation, or pass to Abort Copy File to abort a pending copy.
* _x-ms-copy-status:_ - State of the copy operation with these values:
			*success:* the copy completed successfully.
			*pending:* the copy is still in progress.

]]></attr>
</RichTextNote>
<Dictionary/>
</Global>
<Phase number="0">
<Node __RECORD_ID="sourcePath;targetPath" guiName="AzureRequestErrorHandler" guiX="826" guiY="101" id="AZURE_REQUEST_ERROR_HANDLER" jobURL="${SUBGRAPH_DIR}/AzureResponseHandler.sgrf" skipCheckConfig="true" type="SUBGRAPH">
<attr name="__FIELDS_MAPPING"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.0.*;	
	$out.0.sourcePath = $in.0.originalResponseRecord["sourcePath"].toString() : null;
	$out.0.targetPath = $in.0.originalResponseRecord["targetPath"].toString() : null;

	return ALL;
}
]]></attr>
</Node>
<Node guiName="Call copy-file" guiX="558" guiY="101" id="CALL_COPY_FILE" requestMethod="PUT" type="HTTP_CONNECTOR">
<attr name="errorOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.1.errorMessage = $in.1.errorMessage;
	$out.1.sourcePath = $in.0.sourcePath;
	$out.1.targetPath = $in.0.targetPath;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="inputMapping"><![CDATA[//#CTL2
import "trans/helpers.ctl";

// Transforms input record into output record.
function integer transform() {
	
	$out.0.URL = getFileShareUrlDirectory(getParamValue("STORAGE_NAME"), getParamValue("STORAGE_FILE_ADDRESS"), getParamValue("SHARE_NAME"), nvl($in.0.targetPath, getParamValue("TARGET_PATH")))+"?"+getParamValue("SAS_TOKEN");
	$out.0.additionalHTTPHeaders["x-ms-copy-source"] = getFileShareUrlDirectory(getParamValue("STORAGE_NAME"), getParamValue("STORAGE_FILE_ADDRESS"), getParamValue("SHARE_NAME"), nvl($in.0.sourcePath, getParamValue("SOURCE_PATH")))+"?"+getParamValue("SAS_TOKEN");
	
	$out.0.additionalHTTPHeaders["x-ms-version"] = "2015-02-21";
	$out.0.additionalHTTPHeaders['x-ms-file-permission'] = "inherit";
	
	if(str2bool(getParamValue("DEBUG"))==true){
		printLog(info, "############ Copying files ############");
		printLog(info, "Source URL " + $out.0.additionalHTTPHeaders["x-ms-copy-source"]);
		printLog(info, "Target URL " + $out.0.URL);
	}
	
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
<attr name="standardOutputMapping"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.* = $in.1.*;
	$out.0.sourcePath = $in.0.sourcePath;
	$out.0.targetPath = $in.0.targetPath;

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Combine" guiX="375" guiY="101" id="COMBINE" incompleteTuples="true" type="COMBINE">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	
	if($in.0.sourcePath!=null && $in.0.targetPath != null){
		$out.0.sourcePath = $in.0.sourcePath;
		$out.0.targetPath = $in.0.targetPath;
	}
	else{
		$out.0.sourcePath = $in.1.sourcePath;
		$out.0.targetPath = $in.1.targetPath;
	}
	
	if (startsWith($out.0.sourcePath, "/")) {
		$out.0.sourcePath = right($out.0.sourcePath, length($out.0.sourcePath) - 1);
	}
	
	
	if (startsWith($out.0.targetPath, "/")) {
		$out.0.targetPath = right($out.0.targetPath, length($out.0.targetPath) - 1);	
	}

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node debugInput="true" guiName="DataGenerator" guiX="19" guiY="101" id="DATA_GENERATOR" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.sourcePath = "testFile.txt";
	$out.0.targetPath = "testFolder/testFile3.txt";
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Format output" guiX="1192" guiY="101" id="FORMAT_OUTPUT" type="REFORMAT">
<attr name="transform"><![CDATA[//#CTL2

// Transforms input record into output record.
function integer transform() {
	$out.0.sourcePath = $in.0.sourcePath;
	$out.0.targetPath = $in.0.targetPath;
	$out.0.status = ($in.0.statusCode == 202?true:false);
	$out.0.xMsCopyId = ($in.0.header["x-ms-copy-id"]:null);
	$out.0.xMsCopyStatus= ($in.0.header["x-ms-copy-status"]:null);
	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the transform. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if transform() throws an exception.
// function integer transformOnError(string errorMessage, string stackTrace) {}

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="Read parameters" guiX="248" guiY="217" id="READ_PARAMETERS" type="DATA_GENERATOR">
<attr name="generate"><![CDATA[//#CTL2

// Generates output record.
function integer generate() {
	$out.0.sourcePath = getParamValue("SOURCE_PATH");
	$out.0.targetPath = getParamValue("TARGET_PATH");

	return ALL;
}

// Called during component initialization.
// function boolean init() {}

// Called during each graph run before the transform is executed. May be used to allocate and initialize resources
// required by the generate. All resources allocated within this method should be released
// by the postExecute() method.
// function void preExecute() {}

// Called only if generate() throws an exception.
// function integer generateOnError(string errorMessage, string stackTrace) {
// }

// Called during each graph run after the entire transform was executed. Should be used to free any resources
// allocated within the preExecute() method.
// function void postExecute() {}

// Called to return a user-defined error message when an error occurs.
// function string getMessage() {}
]]></attr>
</Node>
<Node guiName="SubgraphInput" guiX="200" guiY="-285" id="SUBGRAPH_INPUT0" type="SUBGRAPH_INPUT">
<Port guiY="118" name="0"/>
<Port guiY="187" name="1"/>
</Node>
<Node guiName="SubgraphOutput" guiX="1422" guiY="-285" id="SUBGRAPH_OUTPUT0" type="SUBGRAPH_OUTPUT">
<Port guiY="118" name="0"/>
<Port guiY="319" name="1"/>
<Port guiY="384" name="2"/>
</Node>
<Node debugOutput="true" guiName="Trash" guiX="1544" guiY="101" id="TRASH" type="TRASH"/>
<Edge fromNode="AZURE_REQUEST_ERROR_HANDLER:0" guiBendpoints="" guiRouter="Manhattan" id="Edge5" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="FORMAT_OUTPUT:0"/>
<Edge fromNode="AZURE_REQUEST_ERROR_HANDLER:1" guiBendpoints="" guiRouter="Manhattan" id="Edge9" inPort="Port 1 (in)" metadata="HTTPConnector_Response" outPort="Port 1 (out)" toNode="SUBGRAPH_OUTPUT0:1"/>
<Edge fromNode="CALL_COPY_FILE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge3" inPort="Port 0 (in)" metadata="HTTPConnector_Response1" outPort="Port 0 (out)" toNode="AZURE_REQUEST_ERROR_HANDLER:0"/>
<Edge fromNode="CALL_COPY_FILE:1" guiBendpoints="" guiRouter="Manhattan" id="Edge0" inPort="Port 1 (in)" metadata="HTTPConnector_Error" outPort="Port 1 (out)" toNode="AZURE_REQUEST_ERROR_HANDLER:1"/>
<Edge fromNode="COMBINE:0" guiBendpoints="" guiRouter="Manhattan" id="Edge2" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="CALL_COPY_FILE:0"/>
<Edge fromNode="DATA_GENERATOR:0" guiBendpoints="" guiRouter="Manhattan" id="Edge14" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="SUBGRAPH_INPUT0:0"/>
<Edge fromNode="FORMAT_OUTPUT:0" guiBendpoints="" guiRouter="Manhattan" id="Edge1" inPort="Port 0 (in)" metadata="Metadata4" outPort="Port 0 (out)" toNode="SUBGRAPH_OUTPUT0:0"/>
<Edge fromNode="READ_PARAMETERS:0" guiBendpoints="" guiRouter="Manhattan" id="Edge8" inPort="Port 1 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="COMBINE:1"/>
<Edge fromNode="SUBGRAPH_INPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge10" inPort="Port 0 (in)" metadata="Metadata3" outPort="Port 0 (out)" toNode="COMBINE:0"/>
<Edge fromNode="SUBGRAPH_OUTPUT0:0" guiBendpoints="" guiRouter="Manhattan" id="Edge7" inPort="Port 0 (in)" outPort="Port 0 (out)" toNode="TRASH:0"/>
</Phase>
</Graph>
